
lab3_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b50  08002b50  00012b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b74  08002b74  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002b74  08002b74  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b74  08002b74  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b74  08002b74  00012b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b78  08002b78  00012b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002b7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  08002bec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002bec  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e3d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a17  00000000  00000000  00028ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002b3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016891  00000000  00000000  0002bd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc7e  00000000  00000000  000425e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823de  00000000  00000000  0004e25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d063d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a10  00000000  00000000  000d0690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b38 	.word	0x08002b38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002b38 	.word	0x08002b38

0800014c <isButton1Pressed>:
int longPressed_flag2 = 0;
int timeOutForKeyPressed0 = 200;
int timeOutForKeyPressed1 = 200;
int timeOutForKeyPressed2 = 200;

int isButton1Pressed() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if( pressed_flag0 == 1 ) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		pressed_flag0 = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000008c 	.word	0x2000008c

08000170 <isButton2Pressed>:

int isButton2Pressed() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if( pressed_flag1 == 1 ) {
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		pressed_flag1 = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000090 	.word	0x20000090

08000194 <isButton3Pressed>:

int isButton3Pressed() {
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if( pressed_flag2 == 1 ) {
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		pressed_flag2 = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000094 	.word	0x20000094

080001b8 <getKeyInput1>:
int keyReg0[3] = { NORMAL_STATE, NORMAL_STATE, NORMAL_STATE };
int keyReg1[3] = { NORMAL_STATE, NORMAL_STATE, NORMAL_STATE };
int keyReg2[3] = { NORMAL_STATE, NORMAL_STATE, NORMAL_STATE };
int keyReg3[3] = { NORMAL_STATE, NORMAL_STATE, NORMAL_STATE };

void getKeyInput1() {
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	keyReg2[0] = keyReg1[0];
 80001bc:	4b18      	ldr	r3, [pc, #96]	; (8000220 <getKeyInput1+0x68>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a18      	ldr	r2, [pc, #96]	; (8000224 <getKeyInput1+0x6c>)
 80001c2:	6013      	str	r3, [r2, #0]
	keyReg1[0] = keyReg0[0];
 80001c4:	4b18      	ldr	r3, [pc, #96]	; (8000228 <getKeyInput1+0x70>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a15      	ldr	r2, [pc, #84]	; (8000220 <getKeyInput1+0x68>)
 80001ca:	6013      	str	r3, [r2, #0]
	keyReg0[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001cc:	2180      	movs	r1, #128	; 0x80
 80001ce:	4817      	ldr	r0, [pc, #92]	; (800022c <getKeyInput1+0x74>)
 80001d0:	f001 fc78 	bl	8001ac4 <HAL_GPIO_ReadPin>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b13      	ldr	r3, [pc, #76]	; (8000228 <getKeyInput1+0x70>)
 80001da:	601a      	str	r2, [r3, #0]

	if( ( keyReg1[0] == keyReg0[0] ) && ( keyReg1[0] == keyReg2[0] ) ) {
 80001dc:	4b10      	ldr	r3, [pc, #64]	; (8000220 <getKeyInput1+0x68>)
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	4b11      	ldr	r3, [pc, #68]	; (8000228 <getKeyInput1+0x70>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	429a      	cmp	r2, r3
 80001e6:	d119      	bne.n	800021c <getKeyInput1+0x64>
 80001e8:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <getKeyInput1+0x68>)
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <getKeyInput1+0x6c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	429a      	cmp	r2, r3
 80001f2:	d113      	bne.n	800021c <getKeyInput1+0x64>
		if( keyReg2[0] != keyReg3[0] ) {
 80001f4:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <getKeyInput1+0x6c>)
 80001f6:	681a      	ldr	r2, [r3, #0]
 80001f8:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <getKeyInput1+0x78>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d00d      	beq.n	800021c <getKeyInput1+0x64>
			keyReg3[0] = keyReg2[0];
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <getKeyInput1+0x6c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <getKeyInput1+0x78>)
 8000206:	6013      	str	r3, [r2, #0]
			if( keyReg3[0] == PRESSED_STATE ) {
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <getKeyInput1+0x78>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d105      	bne.n	800021c <getKeyInput1+0x64>
				timeOutForKeyPressed0 = 200;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <getKeyInput1+0x7c>)
 8000212:	22c8      	movs	r2, #200	; 0xc8
 8000214:	601a      	str	r2, [r3, #0]
				pressed_flag0 = 1;
 8000216:	4b08      	ldr	r3, [pc, #32]	; (8000238 <getKeyInput1+0x80>)
 8000218:	2201      	movs	r2, #1
 800021a:	601a      	str	r2, [r3, #0]
//					longPressed_flag0 = 1;
//				}
//			}
		}
	}
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	20000018 	.word	0x20000018
 8000224:	20000024 	.word	0x20000024
 8000228:	2000000c 	.word	0x2000000c
 800022c:	40010800 	.word	0x40010800
 8000230:	20000030 	.word	0x20000030
 8000234:	20000000 	.word	0x20000000
 8000238:	2000008c 	.word	0x2000008c

0800023c <getKeyInput2>:

void getKeyInput2() {
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	keyReg2[1] = keyReg1[1];
 8000240:	4b19      	ldr	r3, [pc, #100]	; (80002a8 <getKeyInput2+0x6c>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a19      	ldr	r2, [pc, #100]	; (80002ac <getKeyInput2+0x70>)
 8000246:	6053      	str	r3, [r2, #4]
	keyReg1[1] = keyReg0[1];
 8000248:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <getKeyInput2+0x74>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a16      	ldr	r2, [pc, #88]	; (80002a8 <getKeyInput2+0x6c>)
 800024e:	6053      	str	r3, [r2, #4]
	keyReg0[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000254:	4817      	ldr	r0, [pc, #92]	; (80002b4 <getKeyInput2+0x78>)
 8000256:	f001 fc35 	bl	8001ac4 <HAL_GPIO_ReadPin>
 800025a:	4603      	mov	r3, r0
 800025c:	461a      	mov	r2, r3
 800025e:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <getKeyInput2+0x74>)
 8000260:	605a      	str	r2, [r3, #4]

	if( ( keyReg1[1] == keyReg0[1] ) && ( keyReg1[1] == keyReg2[1] ) ) {
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <getKeyInput2+0x6c>)
 8000264:	685a      	ldr	r2, [r3, #4]
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <getKeyInput2+0x74>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	429a      	cmp	r2, r3
 800026c:	d119      	bne.n	80002a2 <getKeyInput2+0x66>
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <getKeyInput2+0x6c>)
 8000270:	685a      	ldr	r2, [r3, #4]
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <getKeyInput2+0x70>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	429a      	cmp	r2, r3
 8000278:	d113      	bne.n	80002a2 <getKeyInput2+0x66>
		if( keyReg2[1] != keyReg3[1] ) {
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <getKeyInput2+0x70>)
 800027c:	685a      	ldr	r2, [r3, #4]
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <getKeyInput2+0x7c>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	429a      	cmp	r2, r3
 8000284:	d00d      	beq.n	80002a2 <getKeyInput2+0x66>
			keyReg3[1] = keyReg2[1];
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <getKeyInput2+0x70>)
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <getKeyInput2+0x7c>)
 800028c:	6053      	str	r3, [r2, #4]
			if( keyReg3[1] == PRESSED_STATE ) {
 800028e:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <getKeyInput2+0x7c>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d105      	bne.n	80002a2 <getKeyInput2+0x66>
				timeOutForKeyPressed1 = 200;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <getKeyInput2+0x80>)
 8000298:	22c8      	movs	r2, #200	; 0xc8
 800029a:	601a      	str	r2, [r3, #0]
				pressed_flag1 = 1;
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <getKeyInput2+0x84>)
 800029e:	2201      	movs	r2, #1
 80002a0:	601a      	str	r2, [r3, #0]
//					longPressed_flag1 = 1;
//				}
//			}
		}
	}
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000018 	.word	0x20000018
 80002ac:	20000024 	.word	0x20000024
 80002b0:	2000000c 	.word	0x2000000c
 80002b4:	40010800 	.word	0x40010800
 80002b8:	20000030 	.word	0x20000030
 80002bc:	20000004 	.word	0x20000004
 80002c0:	20000090 	.word	0x20000090

080002c4 <getKeyInput3>:

void getKeyInput3() {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	keyReg2[2] = keyReg1[2];
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <getKeyInput3+0x6c>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a19      	ldr	r2, [pc, #100]	; (8000334 <getKeyInput3+0x70>)
 80002ce:	6093      	str	r3, [r2, #8]
	keyReg1[2] = keyReg0[2];
 80002d0:	4b19      	ldr	r3, [pc, #100]	; (8000338 <getKeyInput3+0x74>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4a16      	ldr	r2, [pc, #88]	; (8000330 <getKeyInput3+0x6c>)
 80002d6:	6093      	str	r3, [r2, #8]
	keyReg0[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80002d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002dc:	4817      	ldr	r0, [pc, #92]	; (800033c <getKeyInput3+0x78>)
 80002de:	f001 fbf1 	bl	8001ac4 <HAL_GPIO_ReadPin>
 80002e2:	4603      	mov	r3, r0
 80002e4:	461a      	mov	r2, r3
 80002e6:	4b14      	ldr	r3, [pc, #80]	; (8000338 <getKeyInput3+0x74>)
 80002e8:	609a      	str	r2, [r3, #8]

	if( ( keyReg1[2] == keyReg0[2] ) && ( keyReg1[2] == keyReg2[2] ) ) {
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <getKeyInput3+0x6c>)
 80002ec:	689a      	ldr	r2, [r3, #8]
 80002ee:	4b12      	ldr	r3, [pc, #72]	; (8000338 <getKeyInput3+0x74>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d119      	bne.n	800032a <getKeyInput3+0x66>
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <getKeyInput3+0x6c>)
 80002f8:	689a      	ldr	r2, [r3, #8]
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <getKeyInput3+0x70>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d113      	bne.n	800032a <getKeyInput3+0x66>
		if( keyReg2[2] != keyReg3[2] ) {
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <getKeyInput3+0x70>)
 8000304:	689a      	ldr	r2, [r3, #8]
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <getKeyInput3+0x7c>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	429a      	cmp	r2, r3
 800030c:	d00d      	beq.n	800032a <getKeyInput3+0x66>
			keyReg3[2] = keyReg2[2];
 800030e:	4b09      	ldr	r3, [pc, #36]	; (8000334 <getKeyInput3+0x70>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <getKeyInput3+0x7c>)
 8000314:	6093      	str	r3, [r2, #8]
			if( keyReg3[2] == PRESSED_STATE ) {
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <getKeyInput3+0x7c>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d105      	bne.n	800032a <getKeyInput3+0x66>
				timeOutForKeyPressed2 = 200;
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <getKeyInput3+0x80>)
 8000320:	22c8      	movs	r2, #200	; 0xc8
 8000322:	601a      	str	r2, [r3, #0]
				pressed_flag2 = 1;
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <getKeyInput3+0x84>)
 8000326:	2201      	movs	r2, #1
 8000328:	601a      	str	r2, [r3, #0]
//					longPressed_flag2 = 1;
//				}
//			}
		}
	}
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	20000018 	.word	0x20000018
 8000334:	20000024 	.word	0x20000024
 8000338:	2000000c 	.word	0x2000000c
 800033c:	40010800 	.word	0x40010800
 8000340:	20000030 	.word	0x20000030
 8000344:	20000008 	.word	0x20000008
 8000348:	20000094 	.word	0x20000094

0800034c <led7seg_0>:
#include "main.h"
#include "code7seg.h"
#include "softwareTimer.h"
#include "global.h"

void led7seg_0(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2101      	movs	r1, #1
 8000354:	4811      	ldr	r0, [pc, #68]	; (800039c <led7seg_0+0x50>)
 8000356:	f001 fbcc 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2102      	movs	r1, #2
 800035e:	480f      	ldr	r0, [pc, #60]	; (800039c <led7seg_0+0x50>)
 8000360:	f001 fbc7 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2104      	movs	r1, #4
 8000368:	480c      	ldr	r0, [pc, #48]	; (800039c <led7seg_0+0x50>)
 800036a:	f001 fbc2 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2108      	movs	r1, #8
 8000372:	480a      	ldr	r0, [pc, #40]	; (800039c <led7seg_0+0x50>)
 8000374:	f001 fbbd 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2110      	movs	r1, #16
 800037c:	4807      	ldr	r0, [pc, #28]	; (800039c <led7seg_0+0x50>)
 800037e:	f001 fbb8 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2120      	movs	r1, #32
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <led7seg_0+0x50>)
 8000388:	f001 fbb3 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	2140      	movs	r1, #64	; 0x40
 8000390:	4802      	ldr	r0, [pc, #8]	; (800039c <led7seg_0+0x50>)
 8000392:	f001 fbae 	bl	8001af2 <HAL_GPIO_WritePin>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010c00 	.word	0x40010c00

080003a0 <led7seg_1>:
void led7seg_1(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	2101      	movs	r1, #1
 80003a8:	4811      	ldr	r0, [pc, #68]	; (80003f0 <led7seg_1+0x50>)
 80003aa:	f001 fba2 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2102      	movs	r1, #2
 80003b2:	480f      	ldr	r0, [pc, #60]	; (80003f0 <led7seg_1+0x50>)
 80003b4:	f001 fb9d 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2104      	movs	r1, #4
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <led7seg_1+0x50>)
 80003be:	f001 fb98 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2108      	movs	r1, #8
 80003c6:	480a      	ldr	r0, [pc, #40]	; (80003f0 <led7seg_1+0x50>)
 80003c8:	f001 fb93 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2110      	movs	r1, #16
 80003d0:	4807      	ldr	r0, [pc, #28]	; (80003f0 <led7seg_1+0x50>)
 80003d2:	f001 fb8e 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2120      	movs	r1, #32
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <led7seg_1+0x50>)
 80003dc:	f001 fb89 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	2140      	movs	r1, #64	; 0x40
 80003e4:	4802      	ldr	r0, [pc, #8]	; (80003f0 <led7seg_1+0x50>)
 80003e6:	f001 fb84 	bl	8001af2 <HAL_GPIO_WritePin>
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40010c00 	.word	0x40010c00

080003f4 <led7seg_2>:
void led7seg_2(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2101      	movs	r1, #1
 80003fc:	4811      	ldr	r0, [pc, #68]	; (8000444 <led7seg_2+0x50>)
 80003fe:	f001 fb78 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2102      	movs	r1, #2
 8000406:	480f      	ldr	r0, [pc, #60]	; (8000444 <led7seg_2+0x50>)
 8000408:	f001 fb73 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2104      	movs	r1, #4
 8000410:	480c      	ldr	r0, [pc, #48]	; (8000444 <led7seg_2+0x50>)
 8000412:	f001 fb6e 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2108      	movs	r1, #8
 800041a:	480a      	ldr	r0, [pc, #40]	; (8000444 <led7seg_2+0x50>)
 800041c:	f001 fb69 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2110      	movs	r1, #16
 8000424:	4807      	ldr	r0, [pc, #28]	; (8000444 <led7seg_2+0x50>)
 8000426:	f001 fb64 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800042a:	2201      	movs	r2, #1
 800042c:	2120      	movs	r1, #32
 800042e:	4805      	ldr	r0, [pc, #20]	; (8000444 <led7seg_2+0x50>)
 8000430:	f001 fb5f 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	2140      	movs	r1, #64	; 0x40
 8000438:	4802      	ldr	r0, [pc, #8]	; (8000444 <led7seg_2+0x50>)
 800043a:	f001 fb5a 	bl	8001af2 <HAL_GPIO_WritePin>
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40010c00 	.word	0x40010c00

08000448 <led7seg_3>:
void led7seg_3(){
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2101      	movs	r1, #1
 8000450:	4811      	ldr	r0, [pc, #68]	; (8000498 <led7seg_3+0x50>)
 8000452:	f001 fb4e 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2102      	movs	r1, #2
 800045a:	480f      	ldr	r0, [pc, #60]	; (8000498 <led7seg_3+0x50>)
 800045c:	f001 fb49 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2104      	movs	r1, #4
 8000464:	480c      	ldr	r0, [pc, #48]	; (8000498 <led7seg_3+0x50>)
 8000466:	f001 fb44 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2108      	movs	r1, #8
 800046e:	480a      	ldr	r0, [pc, #40]	; (8000498 <led7seg_3+0x50>)
 8000470:	f001 fb3f 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2110      	movs	r1, #16
 8000478:	4807      	ldr	r0, [pc, #28]	; (8000498 <led7seg_3+0x50>)
 800047a:	f001 fb3a 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800047e:	2201      	movs	r2, #1
 8000480:	2120      	movs	r1, #32
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <led7seg_3+0x50>)
 8000484:	f001 fb35 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2140      	movs	r1, #64	; 0x40
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <led7seg_3+0x50>)
 800048e:	f001 fb30 	bl	8001af2 <HAL_GPIO_WritePin>
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40010c00 	.word	0x40010c00

0800049c <led7seg_4>:
void led7seg_4(){
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2101      	movs	r1, #1
 80004a4:	4811      	ldr	r0, [pc, #68]	; (80004ec <led7seg_4+0x50>)
 80004a6:	f001 fb24 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2102      	movs	r1, #2
 80004ae:	480f      	ldr	r0, [pc, #60]	; (80004ec <led7seg_4+0x50>)
 80004b0:	f001 fb1f 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2104      	movs	r1, #4
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <led7seg_4+0x50>)
 80004ba:	f001 fb1a 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2108      	movs	r1, #8
 80004c2:	480a      	ldr	r0, [pc, #40]	; (80004ec <led7seg_4+0x50>)
 80004c4:	f001 fb15 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2110      	movs	r1, #16
 80004cc:	4807      	ldr	r0, [pc, #28]	; (80004ec <led7seg_4+0x50>)
 80004ce:	f001 fb10 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2120      	movs	r1, #32
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <led7seg_4+0x50>)
 80004d8:	f001 fb0b 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2140      	movs	r1, #64	; 0x40
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <led7seg_4+0x50>)
 80004e2:	f001 fb06 	bl	8001af2 <HAL_GPIO_WritePin>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40010c00 	.word	0x40010c00

080004f0 <led7seg_5>:
void led7seg_5(){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2101      	movs	r1, #1
 80004f8:	4811      	ldr	r0, [pc, #68]	; (8000540 <led7seg_5+0x50>)
 80004fa:	f001 fafa 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2102      	movs	r1, #2
 8000502:	480f      	ldr	r0, [pc, #60]	; (8000540 <led7seg_5+0x50>)
 8000504:	f001 faf5 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2104      	movs	r1, #4
 800050c:	480c      	ldr	r0, [pc, #48]	; (8000540 <led7seg_5+0x50>)
 800050e:	f001 faf0 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	2108      	movs	r1, #8
 8000516:	480a      	ldr	r0, [pc, #40]	; (8000540 <led7seg_5+0x50>)
 8000518:	f001 faeb 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2110      	movs	r1, #16
 8000520:	4807      	ldr	r0, [pc, #28]	; (8000540 <led7seg_5+0x50>)
 8000522:	f001 fae6 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2120      	movs	r1, #32
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <led7seg_5+0x50>)
 800052c:	f001 fae1 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2140      	movs	r1, #64	; 0x40
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <led7seg_5+0x50>)
 8000536:	f001 fadc 	bl	8001af2 <HAL_GPIO_WritePin>
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40010c00 	.word	0x40010c00

08000544 <led7seg_6>:
void led7seg_6(){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2101      	movs	r1, #1
 800054c:	4811      	ldr	r0, [pc, #68]	; (8000594 <led7seg_6+0x50>)
 800054e:	f001 fad0 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	2102      	movs	r1, #2
 8000556:	480f      	ldr	r0, [pc, #60]	; (8000594 <led7seg_6+0x50>)
 8000558:	f001 facb 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2104      	movs	r1, #4
 8000560:	480c      	ldr	r0, [pc, #48]	; (8000594 <led7seg_6+0x50>)
 8000562:	f001 fac6 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2108      	movs	r1, #8
 800056a:	480a      	ldr	r0, [pc, #40]	; (8000594 <led7seg_6+0x50>)
 800056c:	f001 fac1 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2110      	movs	r1, #16
 8000574:	4807      	ldr	r0, [pc, #28]	; (8000594 <led7seg_6+0x50>)
 8000576:	f001 fabc 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2120      	movs	r1, #32
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <led7seg_6+0x50>)
 8000580:	f001 fab7 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2140      	movs	r1, #64	; 0x40
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <led7seg_6+0x50>)
 800058a:	f001 fab2 	bl	8001af2 <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40010c00 	.word	0x40010c00

08000598 <led7seg_7>:
void led7seg_7(){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	2101      	movs	r1, #1
 80005a0:	4811      	ldr	r0, [pc, #68]	; (80005e8 <led7seg_7+0x50>)
 80005a2:	f001 faa6 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2102      	movs	r1, #2
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <led7seg_7+0x50>)
 80005ac:	f001 faa1 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2104      	movs	r1, #4
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <led7seg_7+0x50>)
 80005b6:	f001 fa9c 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2108      	movs	r1, #8
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <led7seg_7+0x50>)
 80005c0:	f001 fa97 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2110      	movs	r1, #16
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <led7seg_7+0x50>)
 80005ca:	f001 fa92 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2120      	movs	r1, #32
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <led7seg_7+0x50>)
 80005d4:	f001 fa8d 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2140      	movs	r1, #64	; 0x40
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <led7seg_7+0x50>)
 80005de:	f001 fa88 	bl	8001af2 <HAL_GPIO_WritePin>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40010c00 	.word	0x40010c00

080005ec <led7seg_8>:
void led7seg_8(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2101      	movs	r1, #1
 80005f4:	4811      	ldr	r0, [pc, #68]	; (800063c <led7seg_8+0x50>)
 80005f6:	f001 fa7c 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2102      	movs	r1, #2
 80005fe:	480f      	ldr	r0, [pc, #60]	; (800063c <led7seg_8+0x50>)
 8000600:	f001 fa77 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2104      	movs	r1, #4
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <led7seg_8+0x50>)
 800060a:	f001 fa72 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2108      	movs	r1, #8
 8000612:	480a      	ldr	r0, [pc, #40]	; (800063c <led7seg_8+0x50>)
 8000614:	f001 fa6d 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2110      	movs	r1, #16
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <led7seg_8+0x50>)
 800061e:	f001 fa68 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2120      	movs	r1, #32
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <led7seg_8+0x50>)
 8000628:	f001 fa63 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <led7seg_8+0x50>)
 8000632:	f001 fa5e 	bl	8001af2 <HAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40010c00 	.word	0x40010c00

08000640 <led7seg_9>:
void led7seg_9(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2101      	movs	r1, #1
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <led7seg_9+0x50>)
 800064a:	f001 fa52 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2102      	movs	r1, #2
 8000652:	480f      	ldr	r0, [pc, #60]	; (8000690 <led7seg_9+0x50>)
 8000654:	f001 fa4d 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2104      	movs	r1, #4
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <led7seg_9+0x50>)
 800065e:	f001 fa48 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2108      	movs	r1, #8
 8000666:	480a      	ldr	r0, [pc, #40]	; (8000690 <led7seg_9+0x50>)
 8000668:	f001 fa43 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2110      	movs	r1, #16
 8000670:	4807      	ldr	r0, [pc, #28]	; (8000690 <led7seg_9+0x50>)
 8000672:	f001 fa3e 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2120      	movs	r1, #32
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <led7seg_9+0x50>)
 800067c:	f001 fa39 	bl	8001af2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <led7seg_9+0x50>)
 8000686:	f001 fa34 	bl	8001af2 <HAL_GPIO_WritePin>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40010c00 	.word	0x40010c00

08000694 <display7SEG>:

void display7SEG(int num){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  switch(num){
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b09      	cmp	r3, #9
 80006a0:	d834      	bhi.n	800070c <display7SEG+0x78>
 80006a2:	a201      	add	r2, pc, #4	; (adr r2, 80006a8 <display7SEG+0x14>)
 80006a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a8:	080006d1 	.word	0x080006d1
 80006ac:	080006d7 	.word	0x080006d7
 80006b0:	080006dd 	.word	0x080006dd
 80006b4:	080006e3 	.word	0x080006e3
 80006b8:	080006e9 	.word	0x080006e9
 80006bc:	080006ef 	.word	0x080006ef
 80006c0:	080006f5 	.word	0x080006f5
 80006c4:	080006fb 	.word	0x080006fb
 80006c8:	08000701 	.word	0x08000701
 80006cc:	08000707 	.word	0x08000707
  case 0:
	  led7seg_0();
 80006d0:	f7ff fe3c 	bl	800034c <led7seg_0>
	  break;
 80006d4:	e01b      	b.n	800070e <display7SEG+0x7a>
  case 1:
	  led7seg_1();
 80006d6:	f7ff fe63 	bl	80003a0 <led7seg_1>
	  break;
 80006da:	e018      	b.n	800070e <display7SEG+0x7a>
  case 2:
	  led7seg_2();
 80006dc:	f7ff fe8a 	bl	80003f4 <led7seg_2>
	  break;
 80006e0:	e015      	b.n	800070e <display7SEG+0x7a>
  case 3:
	  led7seg_3();
 80006e2:	f7ff feb1 	bl	8000448 <led7seg_3>
	  break;
 80006e6:	e012      	b.n	800070e <display7SEG+0x7a>
  case 4:
	  led7seg_4();
 80006e8:	f7ff fed8 	bl	800049c <led7seg_4>
	  break;
 80006ec:	e00f      	b.n	800070e <display7SEG+0x7a>
  case 5:
	  led7seg_5();
 80006ee:	f7ff feff 	bl	80004f0 <led7seg_5>
	  break;
 80006f2:	e00c      	b.n	800070e <display7SEG+0x7a>
  case 6:
	  led7seg_6();
 80006f4:	f7ff ff26 	bl	8000544 <led7seg_6>
	  break;
 80006f8:	e009      	b.n	800070e <display7SEG+0x7a>
  case 7:
	  led7seg_7();
 80006fa:	f7ff ff4d 	bl	8000598 <led7seg_7>
	  break;
 80006fe:	e006      	b.n	800070e <display7SEG+0x7a>
  case 8:
	  led7seg_8();
 8000700:	f7ff ff74 	bl	80005ec <led7seg_8>
	  break;
 8000704:	e003      	b.n	800070e <display7SEG+0x7a>
  case 9:
	  led7seg_9();
 8000706:	f7ff ff9b 	bl	8000640 <led7seg_9>
	  break;
 800070a:	e000      	b.n	800070e <display7SEG+0x7a>
  default:
	  break;
 800070c:	bf00      	nop
  }
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop

08000718 <fsmled7seg>:

void fsmled7seg() {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	switch( led7seg_status ) {
 800071c:	4b62      	ldr	r3, [pc, #392]	; (80008a8 <fsmled7seg+0x190>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	3b01      	subs	r3, #1
 8000722:	2b03      	cmp	r3, #3
 8000724:	f200 80a1 	bhi.w	800086a <fsmled7seg+0x152>
 8000728:	a201      	add	r2, pc, #4	; (adr r2, 8000730 <fsmled7seg+0x18>)
 800072a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072e:	bf00      	nop
 8000730:	08000741 	.word	0x08000741
 8000734:	0800078d 	.word	0x0800078d
 8000738:	080007d7 	.word	0x080007d7
 800073c:	08000821 	.word	0x08000821
		  case LED1:
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2110      	movs	r1, #16
 8000744:	4859      	ldr	r0, [pc, #356]	; (80008ac <fsmled7seg+0x194>)
 8000746:	f001 f9d4 	bl	8001af2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800074a:	2201      	movs	r2, #1
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	4857      	ldr	r0, [pc, #348]	; (80008ac <fsmled7seg+0x194>)
 8000750:	f001 f9cf 	bl	8001af2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000754:	2201      	movs	r2, #1
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	4855      	ldr	r0, [pc, #340]	; (80008b0 <fsmled7seg+0x198>)
 800075a:	f001 f9ca 	bl	8001af2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000764:	4852      	ldr	r0, [pc, #328]	; (80008b0 <fsmled7seg+0x198>)
 8000766:	f001 f9c4 	bl	8001af2 <HAL_GPIO_WritePin>
			  display7SEG(led7buffer[0]);
 800076a:	4b52      	ldr	r3, [pc, #328]	; (80008b4 <fsmled7seg+0x19c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff90 	bl	8000694 <display7SEG>
			  if( flag2 == 1 ) {
 8000774:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <fsmled7seg+0x1a0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	f040 808c 	bne.w	8000896 <fsmled7seg+0x17e>
				  led7seg_status = LED2;
 800077e:	4b4a      	ldr	r3, [pc, #296]	; (80008a8 <fsmled7seg+0x190>)
 8000780:	2202      	movs	r2, #2
 8000782:	601a      	str	r2, [r3, #0]
				  setTimer2(250);
 8000784:	20fa      	movs	r0, #250	; 0xfa
 8000786:	f000 fd55 	bl	8001234 <setTimer2>
			  }
			  break;
 800078a:	e084      	b.n	8000896 <fsmled7seg+0x17e>
		  case LED2:
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800078c:	2201      	movs	r2, #1
 800078e:	2110      	movs	r1, #16
 8000790:	4846      	ldr	r0, [pc, #280]	; (80008ac <fsmled7seg+0x194>)
 8000792:	f001 f9ae 	bl	8001af2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2140      	movs	r1, #64	; 0x40
 800079a:	4844      	ldr	r0, [pc, #272]	; (80008ac <fsmled7seg+0x194>)
 800079c:	f001 f9a9 	bl	8001af2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	4842      	ldr	r0, [pc, #264]	; (80008b0 <fsmled7seg+0x198>)
 80007a6:	f001 f9a4 	bl	8001af2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b0:	483f      	ldr	r0, [pc, #252]	; (80008b0 <fsmled7seg+0x198>)
 80007b2:	f001 f99e 	bl	8001af2 <HAL_GPIO_WritePin>
			  display7SEG(led7buffer[1]);
 80007b6:	4b3f      	ldr	r3, [pc, #252]	; (80008b4 <fsmled7seg+0x19c>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ff6a 	bl	8000694 <display7SEG>
			  if( flag2 == 1 ) {
 80007c0:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <fsmled7seg+0x1a0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d168      	bne.n	800089a <fsmled7seg+0x182>
				  led7seg_status = LED3;
 80007c8:	4b37      	ldr	r3, [pc, #220]	; (80008a8 <fsmled7seg+0x190>)
 80007ca:	2203      	movs	r2, #3
 80007cc:	601a      	str	r2, [r3, #0]
				  setTimer2(250);
 80007ce:	20fa      	movs	r0, #250	; 0xfa
 80007d0:	f000 fd30 	bl	8001234 <setTimer2>
			  }
			  break;
 80007d4:	e061      	b.n	800089a <fsmled7seg+0x182>
		  case LED3:
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2110      	movs	r1, #16
 80007da:	4834      	ldr	r0, [pc, #208]	; (80008ac <fsmled7seg+0x194>)
 80007dc:	f001 f989 	bl	8001af2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2140      	movs	r1, #64	; 0x40
 80007e4:	4831      	ldr	r0, [pc, #196]	; (80008ac <fsmled7seg+0x194>)
 80007e6:	f001 f984 	bl	8001af2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	4830      	ldr	r0, [pc, #192]	; (80008b0 <fsmled7seg+0x198>)
 80007f0:	f001 f97f 	bl	8001af2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <fsmled7seg+0x198>)
 80007fc:	f001 f979 	bl	8001af2 <HAL_GPIO_WritePin>
			  display7SEG(led7buffer[2]);
 8000800:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <fsmled7seg+0x19c>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff45 	bl	8000694 <display7SEG>
			  if( flag2 == 1 ) {
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <fsmled7seg+0x1a0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d145      	bne.n	800089e <fsmled7seg+0x186>
				  led7seg_status = LED4;
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <fsmled7seg+0x190>)
 8000814:	2204      	movs	r2, #4
 8000816:	601a      	str	r2, [r3, #0]
				  setTimer2(250);
 8000818:	20fa      	movs	r0, #250	; 0xfa
 800081a:	f000 fd0b 	bl	8001234 <setTimer2>
			  }
			  break;
 800081e:	e03e      	b.n	800089e <fsmled7seg+0x186>
		  case LED4:
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000820:	2201      	movs	r2, #1
 8000822:	2110      	movs	r1, #16
 8000824:	4821      	ldr	r0, [pc, #132]	; (80008ac <fsmled7seg+0x194>)
 8000826:	f001 f964 	bl	8001af2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	481f      	ldr	r0, [pc, #124]	; (80008ac <fsmled7seg+0x194>)
 8000830:	f001 f95f 	bl	8001af2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	481d      	ldr	r0, [pc, #116]	; (80008b0 <fsmled7seg+0x198>)
 800083a:	f001 f95a 	bl	8001af2 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000844:	481a      	ldr	r0, [pc, #104]	; (80008b0 <fsmled7seg+0x198>)
 8000846:	f001 f954 	bl	8001af2 <HAL_GPIO_WritePin>
			  display7SEG(led7buffer[3]);
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <fsmled7seg+0x19c>)
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff20 	bl	8000694 <display7SEG>
			  if( flag2 == 1 ) {
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <fsmled7seg+0x1a0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d122      	bne.n	80008a2 <fsmled7seg+0x18a>
				  led7seg_status = LED1;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <fsmled7seg+0x190>)
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]
				  setTimer2(250);
 8000862:	20fa      	movs	r0, #250	; 0xfa
 8000864:	f000 fce6 	bl	8001234 <setTimer2>
			  }
			  break;
 8000868:	e01b      	b.n	80008a2 <fsmled7seg+0x18a>
		  default:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	2110      	movs	r1, #16
 800086e:	480f      	ldr	r0, [pc, #60]	; (80008ac <fsmled7seg+0x194>)
 8000870:	f001 f93f 	bl	8001af2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000874:	2201      	movs	r2, #1
 8000876:	2140      	movs	r1, #64	; 0x40
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <fsmled7seg+0x194>)
 800087a:	f001 f93a 	bl	8001af2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 800087e:	2201      	movs	r2, #1
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	480b      	ldr	r0, [pc, #44]	; (80008b0 <fsmled7seg+0x198>)
 8000884:	f001 f935 	bl	8001af2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088e:	4808      	ldr	r0, [pc, #32]	; (80008b0 <fsmled7seg+0x198>)
 8000890:	f001 f92f 	bl	8001af2 <HAL_GPIO_WritePin>
			  break;
 8000894:	e006      	b.n	80008a4 <fsmled7seg+0x18c>
			  break;
 8000896:	bf00      	nop
 8000898:	e004      	b.n	80008a4 <fsmled7seg+0x18c>
			  break;
 800089a:	bf00      	nop
 800089c:	e002      	b.n	80008a4 <fsmled7seg+0x18c>
			  break;
 800089e:	bf00      	nop
 80008a0:	e000      	b.n	80008a4 <fsmled7seg+0x18c>
			  break;
 80008a2:	bf00      	nop
		  }
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000003c 	.word	0x2000003c
 80008ac:	40010800 	.word	0x40010800
 80008b0:	40010c00 	.word	0x40010c00
 80008b4:	200000a0 	.word	0x200000a0
 80008b8:	2000010c 	.word	0x2000010c

080008bc <mode1>:
#include "fsm.h"
#include "main.h"
#include "softwareTimer.h"
#include "global.h"

void mode1() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	switch( led_status ) {
 80008c0:	4b92      	ldr	r3, [pc, #584]	; (8000b0c <mode1+0x250>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	f200 80f0 	bhi.w	8000aaa <mode1+0x1ee>
 80008ca:	a201      	add	r2, pc, #4	; (adr r2, 80008d0 <mode1+0x14>)
 80008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d0:	080008e5 	.word	0x080008e5
 80008d4:	080008f9 	.word	0x080008f9
 80008d8:	08000967 	.word	0x08000967
 80008dc:	080009d3 	.word	0x080009d3
 80008e0:	08000a3f 	.word	0x08000a3f
	case 0:
		led_status = 1;
 80008e4:	4b89      	ldr	r3, [pc, #548]	; (8000b0c <mode1+0x250>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
		led7buffer[1] = 6;
 80008ea:	4b89      	ldr	r3, [pc, #548]	; (8000b10 <mode1+0x254>)
 80008ec:	2206      	movs	r2, #6
 80008ee:	605a      	str	r2, [r3, #4]
		led7buffer[0] = 4;
 80008f0:	4b87      	ldr	r3, [pc, #540]	; (8000b10 <mode1+0x254>)
 80008f2:	2204      	movs	r2, #4
 80008f4:	601a      	str	r2, [r3, #0]
		break;
 80008f6:	e0e1      	b.n	8000abc <mode1+0x200>
	case 1:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008fe:	4885      	ldr	r0, [pc, #532]	; (8000b14 <mode1+0x258>)
 8000900:	f001 f8f7 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090a:	4882      	ldr	r0, [pc, #520]	; (8000b14 <mode1+0x258>)
 800090c:	f001 f8f1 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000916:	487f      	ldr	r0, [pc, #508]	; (8000b14 <mode1+0x258>)
 8000918:	f001 f8eb 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000922:	487c      	ldr	r0, [pc, #496]	; (8000b14 <mode1+0x258>)
 8000924:	f001 f8e5 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800092e:	4879      	ldr	r0, [pc, #484]	; (8000b14 <mode1+0x258>)
 8000930:	f001 f8df 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093a:	4876      	ldr	r0, [pc, #472]	; (8000b14 <mode1+0x258>)
 800093c:	f001 f8d9 	bl	8001af2 <HAL_GPIO_WritePin>
		if( flag1 == 1 ) {
 8000940:	4b75      	ldr	r3, [pc, #468]	; (8000b18 <mode1+0x25c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	f040 80b2 	bne.w	8000aae <mode1+0x1f2>
			led_status = 2;
 800094a:	4b70      	ldr	r3, [pc, #448]	; (8000b0c <mode1+0x250>)
 800094c:	2202      	movs	r2, #2
 800094e:	601a      	str	r2, [r3, #0]
			led7buffer[1] = 3;
 8000950:	4b6f      	ldr	r3, [pc, #444]	; (8000b10 <mode1+0x254>)
 8000952:	2203      	movs	r2, #3
 8000954:	605a      	str	r2, [r3, #4]
			led7buffer[0] = 3;
 8000956:	4b6e      	ldr	r3, [pc, #440]	; (8000b10 <mode1+0x254>)
 8000958:	2203      	movs	r2, #3
 800095a:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 800095c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000960:	f000 fc4e 	bl	8001200 <setTimer1>
		}
		break;
 8000964:	e0a3      	b.n	8000aae <mode1+0x1f2>
	case 2:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800096c:	4869      	ldr	r0, [pc, #420]	; (8000b14 <mode1+0x258>)
 800096e:	f001 f8c0 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000978:	4866      	ldr	r0, [pc, #408]	; (8000b14 <mode1+0x258>)
 800097a:	f001 f8ba 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000984:	4863      	ldr	r0, [pc, #396]	; (8000b14 <mode1+0x258>)
 8000986:	f001 f8b4 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000990:	4860      	ldr	r0, [pc, #384]	; (8000b14 <mode1+0x258>)
 8000992:	f001 f8ae 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800099c:	485d      	ldr	r0, [pc, #372]	; (8000b14 <mode1+0x258>)
 800099e:	f001 f8a8 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a8:	485a      	ldr	r0, [pc, #360]	; (8000b14 <mode1+0x258>)
 80009aa:	f001 f8a2 	bl	8001af2 <HAL_GPIO_WritePin>
		if( flag1 == 1 ) {
 80009ae:	4b5a      	ldr	r3, [pc, #360]	; (8000b18 <mode1+0x25c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d17d      	bne.n	8000ab2 <mode1+0x1f6>
			led_status = 3;
 80009b6:	4b55      	ldr	r3, [pc, #340]	; (8000b0c <mode1+0x250>)
 80009b8:	2203      	movs	r2, #3
 80009ba:	601a      	str	r2, [r3, #0]
			led7buffer[1] = 4;
 80009bc:	4b54      	ldr	r3, [pc, #336]	; (8000b10 <mode1+0x254>)
 80009be:	2204      	movs	r2, #4
 80009c0:	605a      	str	r2, [r3, #4]
			led7buffer[0] = 6;
 80009c2:	4b53      	ldr	r3, [pc, #332]	; (8000b10 <mode1+0x254>)
 80009c4:	2206      	movs	r2, #6
 80009c6:	601a      	str	r2, [r3, #0]
			setTimer1(2000);
 80009c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009cc:	f000 fc18 	bl	8001200 <setTimer1>
		}
		break;
 80009d0:	e06f      	b.n	8000ab2 <mode1+0x1f6>
	case 3:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d8:	484e      	ldr	r0, [pc, #312]	; (8000b14 <mode1+0x258>)
 80009da:	f001 f88a 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e4:	484b      	ldr	r0, [pc, #300]	; (8000b14 <mode1+0x258>)
 80009e6:	f001 f884 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	4848      	ldr	r0, [pc, #288]	; (8000b14 <mode1+0x258>)
 80009f2:	f001 f87e 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	4845      	ldr	r0, [pc, #276]	; (8000b14 <mode1+0x258>)
 80009fe:	f001 f878 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a08:	4842      	ldr	r0, [pc, #264]	; (8000b14 <mode1+0x258>)
 8000a0a:	f001 f872 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a14:	483f      	ldr	r0, [pc, #252]	; (8000b14 <mode1+0x258>)
 8000a16:	f001 f86c 	bl	8001af2 <HAL_GPIO_WritePin>
		if( flag1 == 1 ) {
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	; (8000b18 <mode1+0x25c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d149      	bne.n	8000ab6 <mode1+0x1fa>
			led_status = 4;
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <mode1+0x250>)
 8000a24:	2204      	movs	r2, #4
 8000a26:	601a      	str	r2, [r3, #0]
			led7buffer[1] = 3;
 8000a28:	4b39      	ldr	r3, [pc, #228]	; (8000b10 <mode1+0x254>)
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	605a      	str	r2, [r3, #4]
			led7buffer[0] = 3;
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <mode1+0x254>)
 8000a30:	2203      	movs	r2, #3
 8000a32:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 8000a34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a38:	f000 fbe2 	bl	8001200 <setTimer1>
		}
		break;
 8000a3c:	e03b      	b.n	8000ab6 <mode1+0x1fa>
	case 4:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a44:	4833      	ldr	r0, [pc, #204]	; (8000b14 <mode1+0x258>)
 8000a46:	f001 f854 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a50:	4830      	ldr	r0, [pc, #192]	; (8000b14 <mode1+0x258>)
 8000a52:	f001 f84e 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5c:	482d      	ldr	r0, [pc, #180]	; (8000b14 <mode1+0x258>)
 8000a5e:	f001 f848 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a68:	482a      	ldr	r0, [pc, #168]	; (8000b14 <mode1+0x258>)
 8000a6a:	f001 f842 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a74:	4827      	ldr	r0, [pc, #156]	; (8000b14 <mode1+0x258>)
 8000a76:	f001 f83c 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a80:	4824      	ldr	r0, [pc, #144]	; (8000b14 <mode1+0x258>)
 8000a82:	f001 f836 	bl	8001af2 <HAL_GPIO_WritePin>
		if( flag1 == 1 ) {
 8000a86:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <mode1+0x25c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d115      	bne.n	8000aba <mode1+0x1fe>
			led_status = 1;
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <mode1+0x250>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
			led7buffer[1] = 6;
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <mode1+0x254>)
 8000a96:	2206      	movs	r2, #6
 8000a98:	605a      	str	r2, [r3, #4]
			led7buffer[0] = 4;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <mode1+0x254>)
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	601a      	str	r2, [r3, #0]
			setTimer1(2000);
 8000aa0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aa4:	f000 fbac 	bl	8001200 <setTimer1>
		}
		break;
 8000aa8:	e007      	b.n	8000aba <mode1+0x1fe>
	default:
		break;
 8000aaa:	bf00      	nop
 8000aac:	e006      	b.n	8000abc <mode1+0x200>
		break;
 8000aae:	bf00      	nop
 8000ab0:	e004      	b.n	8000abc <mode1+0x200>
		break;
 8000ab2:	bf00      	nop
 8000ab4:	e002      	b.n	8000abc <mode1+0x200>
		break;
 8000ab6:	bf00      	nop
 8000ab8:	e000      	b.n	8000abc <mode1+0x200>
		break;
 8000aba:	bf00      	nop
	}
	if( flag_7seg == 1 && led_status != OUT) {
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <mode1+0x260>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d121      	bne.n	8000b08 <mode1+0x24c>
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <mode1+0x250>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <mode1+0x264>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d01b      	beq.n	8000b08 <mode1+0x24c>
		led7buffer[0]--;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <mode1+0x254>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <mode1+0x254>)
 8000ad8:	6013      	str	r3, [r2, #0]
		led7buffer[1]--;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <mode1+0x254>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <mode1+0x254>)
 8000ae2:	6053      	str	r3, [r2, #4]
		if(led7buffer[0] < 0) {
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <mode1+0x254>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	da02      	bge.n	8000af2 <mode1+0x236>
			led7buffer[0] = 5;
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <mode1+0x254>)
 8000aee:	2205      	movs	r2, #5
 8000af0:	601a      	str	r2, [r3, #0]
		}
		if(led7buffer[1] < 0) {
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <mode1+0x254>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da02      	bge.n	8000b00 <mode1+0x244>
			led7buffer[1] = 6;
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <mode1+0x254>)
 8000afc:	2206      	movs	r2, #6
 8000afe:	605a      	str	r2, [r3, #4]
		}
		setTime_counter_7seg(1000);
 8000b00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b04:	f000 fbb0 	bl	8001268 <setTime_counter_7seg>
	}

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000098 	.word	0x20000098
 8000b10:	200000a0 	.word	0x200000a0
 8000b14:	40010800 	.word	0x40010800
 8000b18:	20000104 	.word	0x20000104
 8000b1c:	20000114 	.word	0x20000114
 8000b20:	20000040 	.word	0x20000040

08000b24 <mode2>:

void mode2() {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	if( flagBlinkMode == 1 ) {
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <mode2+0xac>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d132      	bne.n	8000b96 <mode2+0x72>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, blink_state);
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <mode2+0xb0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	461a      	mov	r2, r3
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	4826      	ldr	r0, [pc, #152]	; (8000bd8 <mode2+0xb4>)
 8000b3e:	f000 ffd8 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, blink_state);
 8000b42:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <mode2+0xb0>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	461a      	mov	r2, r3
 8000b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4e:	4822      	ldr	r0, [pc, #136]	; (8000bd8 <mode2+0xb4>)
 8000b50:	f000 ffcf 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b5a:	481f      	ldr	r0, [pc, #124]	; (8000bd8 <mode2+0xb4>)
 8000b5c:	f000 ffc9 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b66:	481c      	ldr	r0, [pc, #112]	; (8000bd8 <mode2+0xb4>)
 8000b68:	f000 ffc3 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b72:	4819      	ldr	r0, [pc, #100]	; (8000bd8 <mode2+0xb4>)
 8000b74:	f000 ffbd 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7e:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <mode2+0xb4>)
 8000b80:	f000 ffb7 	bl	8001af2 <HAL_GPIO_WritePin>
		blink_state = 1 - blink_state;
 8000b84:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <mode2+0xb0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f1c3 0301 	rsb	r3, r3, #1
 8000b8c:	4a11      	ldr	r2, [pc, #68]	; (8000bd4 <mode2+0xb0>)
 8000b8e:	6013      	str	r3, [r2, #0]
		setTimerBlinkMode(250);
 8000b90:	20fa      	movs	r0, #250	; 0xfa
 8000b92:	f000 fb83 	bl	800129c <setTimerBlinkMode>
	}
	if( isButton2Pressed() == 1) {
 8000b96:	f7ff faeb 	bl	8000170 <isButton2Pressed>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10b      	bne.n	8000bb8 <mode2+0x94>
		red_timer_mode++;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <mode2+0xb8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <mode2+0xb8>)
 8000ba8:	6013      	str	r3, [r2, #0]
		if( red_timer_mode > 99 ) {
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <mode2+0xb8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b63      	cmp	r3, #99	; 0x63
 8000bb0:	dd02      	ble.n	8000bb8 <mode2+0x94>
			red_timer_mode = 0;
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <mode2+0xb8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
		}
	}
	if( isButton3Pressed() == 1 ) {
 8000bb8:	f7ff faec 	bl	8000194 <isButton3Pressed>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d103      	bne.n	8000bca <mode2+0xa6>
		red_timer = red_timer_mode;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <mode2+0xb8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <mode2+0xbc>)
 8000bc8:	6013      	str	r3, [r2, #0]
	}
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000011c 	.word	0x2000011c
 8000bd4:	20000044 	.word	0x20000044
 8000bd8:	40010800 	.word	0x40010800
 8000bdc:	20000054 	.word	0x20000054
 8000be0:	20000048 	.word	0x20000048

08000be4 <mode3>:

void mode3() {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	if( flagBlinkMode == 1 ) {
 8000be8:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <mode3+0xac>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d132      	bne.n	8000c56 <mode3+0x72>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, blink_state);
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <mode3+0xb0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bfc:	4826      	ldr	r0, [pc, #152]	; (8000c98 <mode3+0xb4>)
 8000bfe:	f000 ff78 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, blink_state);
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <mode3+0xb0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c0e:	4822      	ldr	r0, [pc, #136]	; (8000c98 <mode3+0xb4>)
 8000c10:	f000 ff6f 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c1a:	481f      	ldr	r0, [pc, #124]	; (8000c98 <mode3+0xb4>)
 8000c1c:	f000 ff69 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c26:	481c      	ldr	r0, [pc, #112]	; (8000c98 <mode3+0xb4>)
 8000c28:	f000 ff63 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c32:	4819      	ldr	r0, [pc, #100]	; (8000c98 <mode3+0xb4>)
 8000c34:	f000 ff5d 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c3e:	4816      	ldr	r0, [pc, #88]	; (8000c98 <mode3+0xb4>)
 8000c40:	f000 ff57 	bl	8001af2 <HAL_GPIO_WritePin>
		blink_state = 1 - blink_state;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <mode3+0xb0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f1c3 0301 	rsb	r3, r3, #1
 8000c4c:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <mode3+0xb0>)
 8000c4e:	6013      	str	r3, [r2, #0]
		setTimerBlinkMode(250);
 8000c50:	20fa      	movs	r0, #250	; 0xfa
 8000c52:	f000 fb23 	bl	800129c <setTimerBlinkMode>
	}
	if( isButton2Pressed() == 1) {
 8000c56:	f7ff fa8b 	bl	8000170 <isButton2Pressed>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d10b      	bne.n	8000c78 <mode3+0x94>
		green_timer_mode++;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <mode3+0xb8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <mode3+0xb8>)
 8000c68:	6013      	str	r3, [r2, #0]
		if( green_timer_mode > 99 ) {
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <mode3+0xb8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b63      	cmp	r3, #99	; 0x63
 8000c70:	dd02      	ble.n	8000c78 <mode3+0x94>
			green_timer_mode = 0;
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <mode3+0xb8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
		}
	}
	if( isButton3Pressed() == 1 ) {
 8000c78:	f7ff fa8c 	bl	8000194 <isButton3Pressed>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d103      	bne.n	8000c8a <mode3+0xa6>
		green_timer = green_timer_mode;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <mode3+0xb8>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <mode3+0xbc>)
 8000c88:	6013      	str	r3, [r2, #0]
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000011c 	.word	0x2000011c
 8000c94:	20000044 	.word	0x20000044
 8000c98:	40010800 	.word	0x40010800
 8000c9c:	2000005c 	.word	0x2000005c
 8000ca0:	20000050 	.word	0x20000050

08000ca4 <mode4>:

void mode4() {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	if( flagBlinkMode == 1 ) {
 8000ca8:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <mode4+0xac>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d132      	bne.n	8000d16 <mode4+0x72>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, blink_state);
 8000cb0:	4b28      	ldr	r3, [pc, #160]	; (8000d54 <mode4+0xb0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cbc:	4826      	ldr	r0, [pc, #152]	; (8000d58 <mode4+0xb4>)
 8000cbe:	f000 ff18 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, blink_state);
 8000cc2:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <mode4+0xb0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cce:	4822      	ldr	r0, [pc, #136]	; (8000d58 <mode4+0xb4>)
 8000cd0:	f000 ff0f 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cda:	481f      	ldr	r0, [pc, #124]	; (8000d58 <mode4+0xb4>)
 8000cdc:	f000 ff09 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin, SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce6:	481c      	ldr	r0, [pc, #112]	; (8000d58 <mode4+0xb4>)
 8000ce8:	f000 ff03 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf2:	4819      	ldr	r0, [pc, #100]	; (8000d58 <mode4+0xb4>)
 8000cf4:	f000 fefd 	bl	8001af2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfe:	4816      	ldr	r0, [pc, #88]	; (8000d58 <mode4+0xb4>)
 8000d00:	f000 fef7 	bl	8001af2 <HAL_GPIO_WritePin>
		blink_state = 1 - blink_state;
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <mode4+0xb0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f1c3 0301 	rsb	r3, r3, #1
 8000d0c:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <mode4+0xb0>)
 8000d0e:	6013      	str	r3, [r2, #0]
		setTimerBlinkMode(250);
 8000d10:	20fa      	movs	r0, #250	; 0xfa
 8000d12:	f000 fac3 	bl	800129c <setTimerBlinkMode>
	}
	if( isButton2Pressed() == 1) {
 8000d16:	f7ff fa2b 	bl	8000170 <isButton2Pressed>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d10b      	bne.n	8000d38 <mode4+0x94>
		yellow_timer_mode++;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <mode4+0xb8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <mode4+0xb8>)
 8000d28:	6013      	str	r3, [r2, #0]
		if( yellow_timer_mode > 99 ) {
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <mode4+0xb8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b63      	cmp	r3, #99	; 0x63
 8000d30:	dd02      	ble.n	8000d38 <mode4+0x94>
			yellow_timer_mode = 0;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <mode4+0xb8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
		}
	}
	if( isButton3Pressed() == 1 ) {
 8000d38:	f7ff fa2c 	bl	8000194 <isButton3Pressed>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d103      	bne.n	8000d4a <mode4+0xa6>
		yellow_timer = yellow_timer_mode;
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <mode4+0xb8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <mode4+0xbc>)
 8000d48:	6013      	str	r3, [r2, #0]
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000011c 	.word	0x2000011c
 8000d54:	20000044 	.word	0x20000044
 8000d58:	40010800 	.word	0x40010800
 8000d5c:	20000058 	.word	0x20000058
 8000d60:	2000004c 	.word	0x2000004c

08000d64 <fsmButton>:

void fsmButton() {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	switch( traffic_status ) {
 8000d68:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <fsmButton+0x1a4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	f200 80bf 	bhi.w	8000ef0 <fsmButton+0x18c>
 8000d72:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <fsmButton+0x14>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000d8d 	.word	0x08000d8d
 8000d7c:	08000d9b 	.word	0x08000d9b
 8000d80:	08000dc7 	.word	0x08000dc7
 8000d84:	08000e2b 	.word	0x08000e2b
 8000d88:	08000e8f 	.word	0x08000e8f
	case 0:
		traffic_status = 1;
 8000d8c:	4b5e      	ldr	r3, [pc, #376]	; (8000f08 <fsmButton+0x1a4>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	601a      	str	r2, [r3, #0]
		led_status = 0;
 8000d92:	4b5e      	ldr	r3, [pc, #376]	; (8000f0c <fsmButton+0x1a8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
		break;
 8000d98:	e0b3      	b.n	8000f02 <fsmButton+0x19e>
	case 1:
		mode1();
 8000d9a:	f7ff fd8f 	bl	80008bc <mode1>
		led7buffer[2] = 0;
 8000d9e:	4b5c      	ldr	r3, [pc, #368]	; (8000f10 <fsmButton+0x1ac>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
		led7buffer[3] = 1;
 8000da4:	4b5a      	ldr	r3, [pc, #360]	; (8000f10 <fsmButton+0x1ac>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	60da      	str	r2, [r3, #12]
		if( isButton1Pressed() == 1 ) {
 8000daa:	f7ff f9cf 	bl	800014c <isButton1Pressed>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	f040 809f 	bne.w	8000ef4 <fsmButton+0x190>
			traffic_status = 2;
 8000db6:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <fsmButton+0x1a4>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	601a      	str	r2, [r3, #0]
			led_status = OUT;
 8000dbc:	4b55      	ldr	r3, [pc, #340]	; (8000f14 <fsmButton+0x1b0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a52      	ldr	r2, [pc, #328]	; (8000f0c <fsmButton+0x1a8>)
 8000dc2:	6013      	str	r3, [r2, #0]
		}
		break;
 8000dc4:	e096      	b.n	8000ef4 <fsmButton+0x190>
	case 2:
		mode2();
 8000dc6:	f7ff fead 	bl	8000b24 <mode2>
		led7buffer[0] = red_timer_mode/10;
 8000dca:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <fsmButton+0x1b4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a53      	ldr	r2, [pc, #332]	; (8000f1c <fsmButton+0x1b8>)
 8000dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd4:	1092      	asrs	r2, r2, #2
 8000dd6:	17db      	asrs	r3, r3, #31
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	4a4d      	ldr	r2, [pc, #308]	; (8000f10 <fsmButton+0x1ac>)
 8000ddc:	6013      	str	r3, [r2, #0]
		led7buffer[1] = red_timer_mode%10;
 8000dde:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <fsmButton+0x1b4>)
 8000de0:	6819      	ldr	r1, [r3, #0]
 8000de2:	4b4e      	ldr	r3, [pc, #312]	; (8000f1c <fsmButton+0x1b8>)
 8000de4:	fb83 2301 	smull	r2, r3, r3, r1
 8000de8:	109a      	asrs	r2, r3, #2
 8000dea:	17cb      	asrs	r3, r1, #31
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	1aca      	subs	r2, r1, r3
 8000df8:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <fsmButton+0x1ac>)
 8000dfa:	605a      	str	r2, [r3, #4]
		led7buffer[2] = 0;
 8000dfc:	4b44      	ldr	r3, [pc, #272]	; (8000f10 <fsmButton+0x1ac>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
		led7buffer[3] = 2;
 8000e02:	4b43      	ldr	r3, [pc, #268]	; (8000f10 <fsmButton+0x1ac>)
 8000e04:	2202      	movs	r2, #2
 8000e06:	60da      	str	r2, [r3, #12]
		if( isButton1Pressed() == 1 ) {
 8000e08:	f7ff f9a0 	bl	800014c <isButton1Pressed>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d172      	bne.n	8000ef8 <fsmButton+0x194>
			red_timer_mode = red_timer;
 8000e12:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <fsmButton+0x1bc>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a40      	ldr	r2, [pc, #256]	; (8000f18 <fsmButton+0x1b4>)
 8000e18:	6013      	str	r3, [r2, #0]
			traffic_status = 3;
 8000e1a:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <fsmButton+0x1a4>)
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	601a      	str	r2, [r3, #0]
			led_status = OUT;
 8000e20:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <fsmButton+0x1b0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a39      	ldr	r2, [pc, #228]	; (8000f0c <fsmButton+0x1a8>)
 8000e26:	6013      	str	r3, [r2, #0]
		}
		break;
 8000e28:	e066      	b.n	8000ef8 <fsmButton+0x194>
	case 3:
		mode3();
 8000e2a:	f7ff fedb 	bl	8000be4 <mode3>
		led7buffer[0] = green_timer_mode/10;
 8000e2e:	4b3d      	ldr	r3, [pc, #244]	; (8000f24 <fsmButton+0x1c0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a3a      	ldr	r2, [pc, #232]	; (8000f1c <fsmButton+0x1b8>)
 8000e34:	fb82 1203 	smull	r1, r2, r2, r3
 8000e38:	1092      	asrs	r2, r2, #2
 8000e3a:	17db      	asrs	r3, r3, #31
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	4a34      	ldr	r2, [pc, #208]	; (8000f10 <fsmButton+0x1ac>)
 8000e40:	6013      	str	r3, [r2, #0]
		led7buffer[1] = green_timer_mode%10;
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <fsmButton+0x1c0>)
 8000e44:	6819      	ldr	r1, [r3, #0]
 8000e46:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <fsmButton+0x1b8>)
 8000e48:	fb83 2301 	smull	r2, r3, r3, r1
 8000e4c:	109a      	asrs	r2, r3, #2
 8000e4e:	17cb      	asrs	r3, r1, #31
 8000e50:	1ad2      	subs	r2, r2, r3
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	1aca      	subs	r2, r1, r3
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <fsmButton+0x1ac>)
 8000e5e:	605a      	str	r2, [r3, #4]
		led7buffer[2] = 0;
 8000e60:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <fsmButton+0x1ac>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
		led7buffer[3] = 3;
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <fsmButton+0x1ac>)
 8000e68:	2203      	movs	r2, #3
 8000e6a:	60da      	str	r2, [r3, #12]
		if( isButton1Pressed() == 1 ) {
 8000e6c:	f7ff f96e 	bl	800014c <isButton1Pressed>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d142      	bne.n	8000efc <fsmButton+0x198>
			green_timer_mode = green_timer;
 8000e76:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <fsmButton+0x1c4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a2a      	ldr	r2, [pc, #168]	; (8000f24 <fsmButton+0x1c0>)
 8000e7c:	6013      	str	r3, [r2, #0]
			traffic_status = 4;
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <fsmButton+0x1a4>)
 8000e80:	2204      	movs	r2, #4
 8000e82:	601a      	str	r2, [r3, #0]
			led_status = OUT;
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <fsmButton+0x1b0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a20      	ldr	r2, [pc, #128]	; (8000f0c <fsmButton+0x1a8>)
 8000e8a:	6013      	str	r3, [r2, #0]
		}
		break;
 8000e8c:	e036      	b.n	8000efc <fsmButton+0x198>
	case 4:
		mode4();
 8000e8e:	f7ff ff09 	bl	8000ca4 <mode4>
		led7buffer[0] = yellow_timer_mode/10;
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <fsmButton+0x1c8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <fsmButton+0x1b8>)
 8000e98:	fb82 1203 	smull	r1, r2, r2, r3
 8000e9c:	1092      	asrs	r2, r2, #2
 8000e9e:	17db      	asrs	r3, r3, #31
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <fsmButton+0x1ac>)
 8000ea4:	6013      	str	r3, [r2, #0]
		led7buffer[1] = yellow_timer_mode%10;
 8000ea6:	4b21      	ldr	r3, [pc, #132]	; (8000f2c <fsmButton+0x1c8>)
 8000ea8:	6819      	ldr	r1, [r3, #0]
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <fsmButton+0x1b8>)
 8000eac:	fb83 2301 	smull	r2, r3, r3, r1
 8000eb0:	109a      	asrs	r2, r3, #2
 8000eb2:	17cb      	asrs	r3, r1, #31
 8000eb4:	1ad2      	subs	r2, r2, r3
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	1aca      	subs	r2, r1, r3
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <fsmButton+0x1ac>)
 8000ec2:	605a      	str	r2, [r3, #4]
		led7buffer[2] = 0;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <fsmButton+0x1ac>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
		led7buffer[3] = 4;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <fsmButton+0x1ac>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	60da      	str	r2, [r3, #12]
		if( isButton1Pressed() == 1 ) {
 8000ed0:	f7ff f93c 	bl	800014c <isButton1Pressed>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d112      	bne.n	8000f00 <fsmButton+0x19c>
			yellow_timer_mode = yellow_timer;
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <fsmButton+0x1cc>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <fsmButton+0x1c8>)
 8000ee0:	6013      	str	r3, [r2, #0]
			traffic_status = 1;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <fsmButton+0x1a4>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
			led_status = 0;
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <fsmButton+0x1a8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
		}
		break;
 8000eee:	e007      	b.n	8000f00 <fsmButton+0x19c>
	default:
		break;
 8000ef0:	bf00      	nop
 8000ef2:	e006      	b.n	8000f02 <fsmButton+0x19e>
		break;
 8000ef4:	bf00      	nop
 8000ef6:	e004      	b.n	8000f02 <fsmButton+0x19e>
		break;
 8000ef8:	bf00      	nop
 8000efa:	e002      	b.n	8000f02 <fsmButton+0x19e>
		break;
 8000efc:	bf00      	nop
 8000efe:	e000      	b.n	8000f02 <fsmButton+0x19e>
		break;
 8000f00:	bf00      	nop
	}
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000009c 	.word	0x2000009c
 8000f0c:	20000098 	.word	0x20000098
 8000f10:	200000a0 	.word	0x200000a0
 8000f14:	20000040 	.word	0x20000040
 8000f18:	20000054 	.word	0x20000054
 8000f1c:	66666667 	.word	0x66666667
 8000f20:	20000048 	.word	0x20000048
 8000f24:	2000005c 	.word	0x2000005c
 8000f28:	20000050 	.word	0x20000050
 8000f2c:	20000058 	.word	0x20000058
 8000f30:	2000004c 	.word	0x2000004c

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f000 fad8 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f000 f836 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f000 f8bc 	bl	80010bc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f44:	f000 f86e 	bl	8001024 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f48:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <main+0x6c>)
 8000f4a:	f001 fa31 	bl	80023b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setCycle(10);
 8000f4e:	200a      	movs	r0, #10
 8000f50:	f000 f92e 	bl	80011b0 <setCycle>
  setTimer0(1000);
 8000f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f58:	f000 f938 	bl	80011cc <setTimer0>
  setTimer1(1000);
 8000f5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f60:	f000 f94e 	bl	8001200 <setTimer1>
  setTimer2(1000);
 8000f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f68:	f000 f964 	bl	8001234 <setTimer2>
  setTimerBlinkMode(1000);
 8000f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f70:	f000 f994 	bl	800129c <setTimerBlinkMode>
  setTime_counter_7seg(1000);
 8000f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f78:	f000 f976 	bl	8001268 <setTime_counter_7seg>
  while (1)
  {
	  if(flag0 == 1) {
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <main+0x70>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d107      	bne.n	8000f94 <main+0x60>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f84:	2120      	movs	r1, #32
 8000f86:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <main+0x74>)
 8000f88:	f000 fdcb 	bl	8001b22 <HAL_GPIO_TogglePin>
		  setTimer0(1000);
 8000f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f90:	f000 f91c 	bl	80011cc <setTimer0>
	  }
	  fsmButton();
 8000f94:	f7ff fee6 	bl	8000d64 <fsmButton>
	  fsmled7seg();
 8000f98:	f7ff fbbe 	bl	8000718 <fsmled7seg>
	  if(flag0 == 1) {
 8000f9c:	e7ee      	b.n	8000f7c <main+0x48>
 8000f9e:	bf00      	nop
 8000fa0:	200000b0 	.word	0x200000b0
 8000fa4:	200000fc 	.word	0x200000fc
 8000fa8:	40010800 	.word	0x40010800

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b090      	sub	sp, #64	; 0x40
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0318 	add.w	r3, r7, #24
 8000fb6:	2228      	movs	r2, #40	; 0x28
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 fdb4 	bl	8002b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fdb6 	bl	8001b54 <HAL_RCC_OscConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fee:	f000 f8d9 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f001 f824 	bl	8002058 <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001016:	f000 f8c5 	bl	80011a4 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3740      	adds	r7, #64	; 0x40
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0308 	add.w	r3, r7, #8
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	463b      	mov	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001042:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001046:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_TIM2_Init+0x94>)
 800104a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800104e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001058:	2209      	movs	r2, #9
 800105a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_TIM2_Init+0x94>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001068:	4813      	ldr	r0, [pc, #76]	; (80010b8 <MX_TIM2_Init+0x94>)
 800106a:	f001 f951 	bl	8002310 <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001074:	f000 f896 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_TIM2_Init+0x94>)
 8001086:	f001 fae7 	bl	8002658 <HAL_TIM_ConfigClockSource>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001090:	f000 f888 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109c:	463b      	mov	r3, r7
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_TIM2_Init+0x94>)
 80010a2:	f001 fcb3 	bl	8002a0c <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010ac:	f000 f87a 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200000b0 	.word	0x200000b0

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0308 	add.w	r3, r7, #8
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <MX_GPIO_Init+0xbc>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a28      	ldr	r2, [pc, #160]	; (8001178 <MX_GPIO_Init+0xbc>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <MX_GPIO_Init+0xbc>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <MX_GPIO_Init+0xbc>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a22      	ldr	r2, [pc, #136]	; (8001178 <MX_GPIO_Init+0xbc>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <MX_GPIO_Init+0xbc>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|LED_Pin|EN1_Pin|LED_RED_1_Pin
 8001100:	2200      	movs	r2, #0
 8001102:	f64f 4170 	movw	r1, #64624	; 0xfc70
 8001106:	481d      	ldr	r0, [pc, #116]	; (800117c <MX_GPIO_Init+0xc0>)
 8001108:	f000 fcf3 	bl	8001af2 <HAL_GPIO_WritePin>
                          |LED_GREEN_1_Pin|LED_YELLOW_1_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin
                          |LED_YELLOW_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 800110c:	2200      	movs	r2, #0
 800110e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001112:	481b      	ldr	r0, [pc, #108]	; (8001180 <MX_GPIO_Init+0xc4>)
 8001114:	f000 fced 	bl	8001af2 <HAL_GPIO_WritePin>
                          |EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin LED_Pin EN1_Pin LED_RED_1_Pin
                           LED_GREEN_1_Pin LED_YELLOW_1_Pin LED_RED_2_Pin LED_GREEN_2_Pin
                           LED_YELLOW_2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|LED_Pin|EN1_Pin|LED_RED_1_Pin
 8001118:	f64f 4370 	movw	r3, #64624	; 0xfc70
 800111c:	60bb      	str	r3, [r7, #8]
                          |LED_GREEN_1_Pin|LED_YELLOW_1_Pin|LED_RED_2_Pin|LED_GREEN_2_Pin
                          |LED_YELLOW_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2302      	movs	r3, #2
 8001128:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4619      	mov	r1, r3
 8001130:	4812      	ldr	r0, [pc, #72]	; (800117c <MX_GPIO_Init+0xc0>)
 8001132:	f000 fb4b 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001136:	f44f 7360 	mov.w	r3, #896	; 0x380
 800113a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001140:	2301      	movs	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0308 	add.w	r3, r7, #8
 8001148:	4619      	mov	r1, r3
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <MX_GPIO_Init+0xc0>)
 800114c:	f000 fb3e 	bl	80017cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001150:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001154:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|EN2_Pin
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001156:	2301      	movs	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2302      	movs	r3, #2
 8001160:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_GPIO_Init+0xc4>)
 800116a:	f000 fb2f 	bl	80017cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	40010800 	.word	0x40010800
 8001180:	40010c00 	.word	0x40010c00

08001184 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	timerRun();
 800118c:	f000 f8a0 	bl	80012d0 <timerRun>
	getKeyInput1();
 8001190:	f7ff f812 	bl	80001b8 <getKeyInput1>
	getKeyInput2();
 8001194:	f7ff f852 	bl	800023c <getKeyInput2>
	getKeyInput3();
 8001198:	f7ff f894 	bl	80002c4 <getKeyInput3>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <setCycle>:
int timerMode = 0;
int flagBlinkMode = 0;

int cycle = 10;

void setCycle(int userCycle) {
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	cycle = userCycle;
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <setCycle+0x18>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6013      	str	r3, [r2, #0]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	20000060 	.word	0x20000060

080011cc <setTimer0>:

void setTimer0(int duration) {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	timerCounter0 = duration/cycle;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <setTimer0+0x28>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	fb92 f3f3 	sdiv	r3, r2, r3
 80011de:	4a06      	ldr	r2, [pc, #24]	; (80011f8 <setTimer0+0x2c>)
 80011e0:	6013      	str	r3, [r2, #0]
	flag0 = 0;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <setTimer0+0x30>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000060 	.word	0x20000060
 80011f8:	200000f8 	.word	0x200000f8
 80011fc:	200000fc 	.word	0x200000fc

08001200 <setTimer1>:
void setTimer1(int duration) {
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	timerCounter1 = duration/cycle;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <setTimer1+0x28>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001212:	4a06      	ldr	r2, [pc, #24]	; (800122c <setTimer1+0x2c>)
 8001214:	6013      	str	r3, [r2, #0]
	flag1 = 0;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <setTimer1+0x30>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000060 	.word	0x20000060
 800122c:	20000100 	.word	0x20000100
 8001230:	20000104 	.word	0x20000104

08001234 <setTimer2>:
void setTimer2(int duration) {
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	timerCounter2 = duration/cycle;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <setTimer2+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	fb92 f3f3 	sdiv	r3, r2, r3
 8001246:	4a06      	ldr	r2, [pc, #24]	; (8001260 <setTimer2+0x2c>)
 8001248:	6013      	str	r3, [r2, #0]
	flag2 = 0;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <setTimer2+0x30>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000060 	.word	0x20000060
 8001260:	20000108 	.word	0x20000108
 8001264:	2000010c 	.word	0x2000010c

08001268 <setTime_counter_7seg>:
void setTime_counter_7seg(int duration) {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	time_counter_7seg = duration/cycle;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <setTime_counter_7seg+0x28>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	fb92 f3f3 	sdiv	r3, r2, r3
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <setTime_counter_7seg+0x2c>)
 800127c:	6013      	str	r3, [r2, #0]
	flag_7seg = 0;
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <setTime_counter_7seg+0x30>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000060 	.word	0x20000060
 8001294:	20000110 	.word	0x20000110
 8001298:	20000114 	.word	0x20000114

0800129c <setTimerBlinkMode>:
void setTimerBlinkMode(int duration) {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	timerMode = duration/cycle;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <setTimerBlinkMode+0x28>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80012ae:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <setTimerBlinkMode+0x2c>)
 80012b0:	6013      	str	r3, [r2, #0]
	flagBlinkMode = 0;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <setTimerBlinkMode+0x30>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000060 	.word	0x20000060
 80012c8:	20000118 	.word	0x20000118
 80012cc:	2000011c 	.word	0x2000011c

080012d0 <timerRun>:

void timerRun() {
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
	if(timerCounter0 > 0) {
 80012d4:	4b29      	ldr	r3, [pc, #164]	; (800137c <timerRun+0xac>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dd0b      	ble.n	80012f4 <timerRun+0x24>
		timerCounter0--;
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <timerRun+0xac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	4a26      	ldr	r2, [pc, #152]	; (800137c <timerRun+0xac>)
 80012e4:	6013      	str	r3, [r2, #0]
		if(timerCounter0 <= 0) {
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <timerRun+0xac>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	dc02      	bgt.n	80012f4 <timerRun+0x24>
			flag0 = 1;
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <timerRun+0xb0>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timerCounter1 > 0) {
 80012f4:	4b23      	ldr	r3, [pc, #140]	; (8001384 <timerRun+0xb4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	dd0b      	ble.n	8001314 <timerRun+0x44>
		timerCounter1--;
 80012fc:	4b21      	ldr	r3, [pc, #132]	; (8001384 <timerRun+0xb4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3b01      	subs	r3, #1
 8001302:	4a20      	ldr	r2, [pc, #128]	; (8001384 <timerRun+0xb4>)
 8001304:	6013      	str	r3, [r2, #0]
		if(timerCounter1 <= 0) {
 8001306:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <timerRun+0xb4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	dc02      	bgt.n	8001314 <timerRun+0x44>
			flag1 = 1;
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <timerRun+0xb8>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
		}
	}
	if(timerCounter2 > 0) {
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <timerRun+0xbc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	dd0b      	ble.n	8001334 <timerRun+0x64>
		timerCounter2--;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <timerRun+0xbc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3b01      	subs	r3, #1
 8001322:	4a1a      	ldr	r2, [pc, #104]	; (800138c <timerRun+0xbc>)
 8001324:	6013      	str	r3, [r2, #0]
		if(timerCounter2 <= 0) {
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <timerRun+0xbc>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	dc02      	bgt.n	8001334 <timerRun+0x64>
			flag2 = 1;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <timerRun+0xc0>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
		}
	}
	if( time_counter_7seg > 0 ) {
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <timerRun+0xc4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	dd0b      	ble.n	8001354 <timerRun+0x84>
		time_counter_7seg--;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <timerRun+0xc4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3b01      	subs	r3, #1
 8001342:	4a14      	ldr	r2, [pc, #80]	; (8001394 <timerRun+0xc4>)
 8001344:	6013      	str	r3, [r2, #0]
		if( time_counter_7seg <= 0 ) {
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <timerRun+0xc4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dc02      	bgt.n	8001354 <timerRun+0x84>
			flag_7seg = 1;
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <timerRun+0xc8>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]
		}
	}
	if( timerMode > 0 ) {
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <timerRun+0xcc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	dd0b      	ble.n	8001374 <timerRun+0xa4>
		timerMode--;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <timerRun+0xcc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <timerRun+0xcc>)
 8001364:	6013      	str	r3, [r2, #0]
		if( timerMode <= 0 ) {
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <timerRun+0xcc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	dc02      	bgt.n	8001374 <timerRun+0xa4>
			flagBlinkMode = 1;
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <timerRun+0xd0>)
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	200000f8 	.word	0x200000f8
 8001380:	200000fc 	.word	0x200000fc
 8001384:	20000100 	.word	0x20000100
 8001388:	20000104 	.word	0x20000104
 800138c:	20000108 	.word	0x20000108
 8001390:	2000010c 	.word	0x2000010c
 8001394:	20000110 	.word	0x20000110
 8001398:	20000114 	.word	0x20000114
 800139c:	20000118 	.word	0x20000118
 80013a0:	2000011c 	.word	0x2000011c

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_MspInit+0x40>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <HAL_MspInit+0x40>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6193      	str	r3, [r2, #24]
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_MspInit+0x40>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_MspInit+0x40>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_MspInit+0x40>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_MspInit+0x40>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f8:	d113      	bne.n	8001422 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_TIM_Base_MspInit+0x44>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a0b      	ldr	r2, [pc, #44]	; (800142c <HAL_TIM_Base_MspInit+0x44>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_TIM_Base_MspInit+0x44>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	201c      	movs	r0, #28
 8001418:	f000 f9a1 	bl	800175e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800141c:	201c      	movs	r0, #28
 800141e:	f000 f9ba 	bl	8001796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <NMI_Handler+0x4>

08001436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <MemManage_Handler+0x4>

08001442 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <UsageFault_Handler+0x4>

0800144e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001476:	f000 f87f 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <TIM2_IRQHandler+0x10>)
 8001486:	f000 ffdf 	bl	8002448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200000b0 	.word	0x200000b0

08001494 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a0:	f7ff fff8 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014a6:	490c      	ldr	r1, [pc, #48]	; (80014d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014a8:	4a0c      	ldr	r2, [pc, #48]	; (80014dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014bc:	4c09      	ldr	r4, [pc, #36]	; (80014e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ca:	f001 fb09 	bl	8002ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ce:	f7ff fd31 	bl	8000f34 <main>
  bx lr
 80014d2:	4770      	bx	lr
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014dc:	08002b7c 	.word	0x08002b7c
  ldr r2, =_sbss
 80014e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014e4:	20000124 	.word	0x20000124

080014e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_2_IRQHandler>
	...

080014ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_Init+0x28>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_Init+0x28>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 f923 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001502:	200f      	movs	r0, #15
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001508:	f7ff ff4c 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f93b 	bl	80017b2 <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 f903 	bl	800175e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000064 	.word	0x20000064
 8001570:	2000006c 	.word	0x2000006c
 8001574:	20000068 	.word	0x20000068

08001578 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_IncTick+0x1c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_IncTick+0x20>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a03      	ldr	r2, [pc, #12]	; (8001598 <HAL_IncTick+0x20>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	2000006c 	.word	0x2000006c
 8001598:	20000120 	.word	0x20000120

0800159c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b02      	ldr	r3, [pc, #8]	; (80015ac <HAL_GetTick+0x10>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000120 	.word	0x20000120

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db0b      	blt.n	800163e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4906      	ldr	r1, [pc, #24]	; (8001648 <__NVIC_EnableIRQ+0x34>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2001      	movs	r0, #1
 8001636:	fa00 f202 	lsl.w	r2, r0, r2
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100

0800164c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	; (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001714:	d301      	bcc.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e00f      	b.n	800173a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <SysTick_Config+0x40>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	210f      	movs	r1, #15
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f7ff ff90 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <SysTick_Config+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <SysTick_Config+0x40>)
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff2d 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff42 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff90 	bl	80016a0 <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5f 	bl	800164c <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff35 	bl	8001614 <__NVIC_EnableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffa2 	bl	8001704 <SysTick_Config>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b08b      	sub	sp, #44	; 0x2c
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017de:	e161      	b.n	8001aa4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017e0:	2201      	movs	r2, #1
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	f040 8150 	bne.w	8001a9e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4a97      	ldr	r2, [pc, #604]	; (8001a60 <HAL_GPIO_Init+0x294>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d05e      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 8001808:	4a95      	ldr	r2, [pc, #596]	; (8001a60 <HAL_GPIO_Init+0x294>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d875      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 800180e:	4a95      	ldr	r2, [pc, #596]	; (8001a64 <HAL_GPIO_Init+0x298>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d058      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 8001814:	4a93      	ldr	r2, [pc, #588]	; (8001a64 <HAL_GPIO_Init+0x298>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d86f      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 800181a:	4a93      	ldr	r2, [pc, #588]	; (8001a68 <HAL_GPIO_Init+0x29c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d052      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 8001820:	4a91      	ldr	r2, [pc, #580]	; (8001a68 <HAL_GPIO_Init+0x29c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d869      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 8001826:	4a91      	ldr	r2, [pc, #580]	; (8001a6c <HAL_GPIO_Init+0x2a0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d04c      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 800182c:	4a8f      	ldr	r2, [pc, #572]	; (8001a6c <HAL_GPIO_Init+0x2a0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d863      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 8001832:	4a8f      	ldr	r2, [pc, #572]	; (8001a70 <HAL_GPIO_Init+0x2a4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d046      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
 8001838:	4a8d      	ldr	r2, [pc, #564]	; (8001a70 <HAL_GPIO_Init+0x2a4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d85d      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 800183e:	2b12      	cmp	r3, #18
 8001840:	d82a      	bhi.n	8001898 <HAL_GPIO_Init+0xcc>
 8001842:	2b12      	cmp	r3, #18
 8001844:	d859      	bhi.n	80018fa <HAL_GPIO_Init+0x12e>
 8001846:	a201      	add	r2, pc, #4	; (adr r2, 800184c <HAL_GPIO_Init+0x80>)
 8001848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184c:	080018c7 	.word	0x080018c7
 8001850:	080018a1 	.word	0x080018a1
 8001854:	080018b3 	.word	0x080018b3
 8001858:	080018f5 	.word	0x080018f5
 800185c:	080018fb 	.word	0x080018fb
 8001860:	080018fb 	.word	0x080018fb
 8001864:	080018fb 	.word	0x080018fb
 8001868:	080018fb 	.word	0x080018fb
 800186c:	080018fb 	.word	0x080018fb
 8001870:	080018fb 	.word	0x080018fb
 8001874:	080018fb 	.word	0x080018fb
 8001878:	080018fb 	.word	0x080018fb
 800187c:	080018fb 	.word	0x080018fb
 8001880:	080018fb 	.word	0x080018fb
 8001884:	080018fb 	.word	0x080018fb
 8001888:	080018fb 	.word	0x080018fb
 800188c:	080018fb 	.word	0x080018fb
 8001890:	080018a9 	.word	0x080018a9
 8001894:	080018bd 	.word	0x080018bd
 8001898:	4a76      	ldr	r2, [pc, #472]	; (8001a74 <HAL_GPIO_Init+0x2a8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800189e:	e02c      	b.n	80018fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e029      	b.n	80018fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	3304      	adds	r3, #4
 80018ae:	623b      	str	r3, [r7, #32]
          break;
 80018b0:	e024      	b.n	80018fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	3308      	adds	r3, #8
 80018b8:	623b      	str	r3, [r7, #32]
          break;
 80018ba:	e01f      	b.n	80018fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	330c      	adds	r3, #12
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	e01a      	b.n	80018fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ce:	2304      	movs	r3, #4
 80018d0:	623b      	str	r3, [r7, #32]
          break;
 80018d2:	e013      	b.n	80018fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018dc:	2308      	movs	r3, #8
 80018de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	611a      	str	r2, [r3, #16]
          break;
 80018e6:	e009      	b.n	80018fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e8:	2308      	movs	r3, #8
 80018ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	615a      	str	r2, [r3, #20]
          break;
 80018f2:	e003      	b.n	80018fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018f4:	2300      	movs	r3, #0
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e000      	b.n	80018fc <HAL_GPIO_Init+0x130>
          break;
 80018fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2bff      	cmp	r3, #255	; 0xff
 8001900:	d801      	bhi.n	8001906 <HAL_GPIO_Init+0x13a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	e001      	b.n	800190a <HAL_GPIO_Init+0x13e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3304      	adds	r3, #4
 800190a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2bff      	cmp	r3, #255	; 0xff
 8001910:	d802      	bhi.n	8001918 <HAL_GPIO_Init+0x14c>
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	e002      	b.n	800191e <HAL_GPIO_Init+0x152>
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	3b08      	subs	r3, #8
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	210f      	movs	r1, #15
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	401a      	ands	r2, r3
 8001930:	6a39      	ldr	r1, [r7, #32]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	431a      	orrs	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80a9 	beq.w	8001a9e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800194c:	4b4a      	ldr	r3, [pc, #296]	; (8001a78 <HAL_GPIO_Init+0x2ac>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a49      	ldr	r2, [pc, #292]	; (8001a78 <HAL_GPIO_Init+0x2ac>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_GPIO_Init+0x2ac>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001964:	4a45      	ldr	r2, [pc, #276]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	4013      	ands	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a3d      	ldr	r2, [pc, #244]	; (8001a80 <HAL_GPIO_Init+0x2b4>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d00d      	beq.n	80019ac <HAL_GPIO_Init+0x1e0>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3c      	ldr	r2, [pc, #240]	; (8001a84 <HAL_GPIO_Init+0x2b8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d007      	beq.n	80019a8 <HAL_GPIO_Init+0x1dc>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a3b      	ldr	r2, [pc, #236]	; (8001a88 <HAL_GPIO_Init+0x2bc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d101      	bne.n	80019a4 <HAL_GPIO_Init+0x1d8>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e004      	b.n	80019ae <HAL_GPIO_Init+0x1e2>
 80019a4:	2303      	movs	r3, #3
 80019a6:	e002      	b.n	80019ae <HAL_GPIO_Init+0x1e2>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_GPIO_Init+0x1e2>
 80019ac:	2300      	movs	r3, #0
 80019ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b0:	f002 0203 	and.w	r2, r2, #3
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	4093      	lsls	r3, r2
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019be:	492f      	ldr	r1, [pc, #188]	; (8001a7c <HAL_GPIO_Init+0x2b0>)
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	3302      	adds	r3, #2
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019d8:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	492b      	ldr	r1, [pc, #172]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019e6:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4927      	ldr	r1, [pc, #156]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	4921      	ldr	r1, [pc, #132]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	491d      	ldr	r1, [pc, #116]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	4917      	ldr	r1, [pc, #92]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	4913      	ldr	r1, [pc, #76]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d01f      	beq.n	8001a90 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	490d      	ldr	r1, [pc, #52]	; (8001a8c <HAL_GPIO_Init+0x2c0>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
 8001a5c:	e01f      	b.n	8001a9e <HAL_GPIO_Init+0x2d2>
 8001a5e:	bf00      	nop
 8001a60:	10320000 	.word	0x10320000
 8001a64:	10310000 	.word	0x10310000
 8001a68:	10220000 	.word	0x10220000
 8001a6c:	10210000 	.word	0x10210000
 8001a70:	10120000 	.word	0x10120000
 8001a74:	10110000 	.word	0x10110000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40010800 	.word	0x40010800
 8001a84:	40010c00 	.word	0x40010c00
 8001a88:	40011000 	.word	0x40011000
 8001a8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_GPIO_Init+0x2f4>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	4909      	ldr	r1, [pc, #36]	; (8001ac0 <HAL_GPIO_Init+0x2f4>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f47f ae96 	bne.w	80017e0 <HAL_GPIO_Init+0x14>
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	372c      	adds	r7, #44	; 0x2c
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e001      	b.n	8001ae6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	807b      	strh	r3, [r7, #2]
 8001afe:	4613      	mov	r3, r2
 8001b00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b02:	787b      	ldrb	r3, [r7, #1]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b08:	887a      	ldrh	r2, [r7, #2]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b0e:	e003      	b.n	8001b18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	041a      	lsls	r2, r3, #16
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	611a      	str	r2, [r3, #16]
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b085      	sub	sp, #20
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b34:	887a      	ldrh	r2, [r7, #2]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	041a      	lsls	r2, r3, #16
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	400b      	ands	r3, r1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	611a      	str	r2, [r3, #16]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e272      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8087 	beq.w	8001c82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b74:	4b92      	ldr	r3, [pc, #584]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d00c      	beq.n	8001b9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b80:	4b8f      	ldr	r3, [pc, #572]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d112      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x5e>
 8001b8c:	4b8c      	ldr	r3, [pc, #560]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d10b      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9a:	4b89      	ldr	r3, [pc, #548]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d06c      	beq.n	8001c80 <HAL_RCC_OscConfig+0x12c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d168      	bne.n	8001c80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e24c      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x76>
 8001bbc:	4b80      	ldr	r3, [pc, #512]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a7f      	ldr	r2, [pc, #508]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	e02e      	b.n	8001c28 <HAL_RCC_OscConfig+0xd4>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x98>
 8001bd2:	4b7b      	ldr	r3, [pc, #492]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a7a      	ldr	r2, [pc, #488]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b78      	ldr	r3, [pc, #480]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a77      	ldr	r2, [pc, #476]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e01d      	b.n	8001c28 <HAL_RCC_OscConfig+0xd4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0xbc>
 8001bf6:	4b72      	ldr	r3, [pc, #456]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a71      	ldr	r2, [pc, #452]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b6f      	ldr	r3, [pc, #444]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a6e      	ldr	r2, [pc, #440]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e00b      	b.n	8001c28 <HAL_RCC_OscConfig+0xd4>
 8001c10:	4b6b      	ldr	r3, [pc, #428]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a6a      	ldr	r2, [pc, #424]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b68      	ldr	r3, [pc, #416]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a67      	ldr	r2, [pc, #412]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d013      	beq.n	8001c58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fcb4 	bl	800159c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fcb0 	bl	800159c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e200      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b5d      	ldr	r3, [pc, #372]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0xe4>
 8001c56:	e014      	b.n	8001c82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff fca0 	bl	800159c <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff fc9c 	bl	800159c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e1ec      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x10c>
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d063      	beq.n	8001d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c8e:	4b4c      	ldr	r3, [pc, #304]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00b      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c9a:	4b49      	ldr	r3, [pc, #292]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d11c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x18c>
 8001ca6:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d116      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb2:	4b43      	ldr	r3, [pc, #268]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_RCC_OscConfig+0x176>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e1c0      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4939      	ldr	r1, [pc, #228]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cde:	e03a      	b.n	8001d56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d020      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce8:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <HAL_RCC_OscConfig+0x270>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7ff fc55 	bl	800159c <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7ff fc51 	bl	800159c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1a1      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4927      	ldr	r1, [pc, #156]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]
 8001d28:	e015      	b.n	8001d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2a:	4b26      	ldr	r3, [pc, #152]	; (8001dc4 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7ff fc34 	bl	800159c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d38:	f7ff fc30 	bl	800159c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e180      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d03a      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d019      	beq.n	8001d9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d70:	f7ff fc14 	bl	800159c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff fc10 	bl	800159c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e160      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d96:	2001      	movs	r0, #1
 8001d98:	f000 fa9c 	bl	80022d4 <RCC_Delay>
 8001d9c:	e01c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da4:	f7ff fbfa 	bl	800159c <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001daa:	e00f      	b.n	8001dcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dac:	f7ff fbf6 	bl	800159c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d908      	bls.n	8001dcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e146      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	42420000 	.word	0x42420000
 8001dc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dcc:	4b92      	ldr	r3, [pc, #584]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1e9      	bne.n	8001dac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80a6 	beq.w	8001f32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dea:	4b8b      	ldr	r3, [pc, #556]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b88      	ldr	r3, [pc, #544]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4a87      	ldr	r2, [pc, #540]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	61d3      	str	r3, [r2, #28]
 8001e02:	4b85      	ldr	r3, [pc, #532]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e12:	4b82      	ldr	r3, [pc, #520]	; (800201c <HAL_RCC_OscConfig+0x4c8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d118      	bne.n	8001e50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e1e:	4b7f      	ldr	r3, [pc, #508]	; (800201c <HAL_RCC_OscConfig+0x4c8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a7e      	ldr	r2, [pc, #504]	; (800201c <HAL_RCC_OscConfig+0x4c8>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff fbb7 	bl	800159c <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e32:	f7ff fbb3 	bl	800159c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b64      	cmp	r3, #100	; 0x64
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e103      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	4b75      	ldr	r3, [pc, #468]	; (800201c <HAL_RCC_OscConfig+0x4c8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x312>
 8001e58:	4b6f      	ldr	r3, [pc, #444]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4a6e      	ldr	r2, [pc, #440]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6213      	str	r3, [r2, #32]
 8001e64:	e02d      	b.n	8001ec2 <HAL_RCC_OscConfig+0x36e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x334>
 8001e6e:	4b6a      	ldr	r3, [pc, #424]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a69      	ldr	r2, [pc, #420]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6213      	str	r3, [r2, #32]
 8001e7a:	4b67      	ldr	r3, [pc, #412]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a66      	ldr	r2, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	6213      	str	r3, [r2, #32]
 8001e86:	e01c      	b.n	8001ec2 <HAL_RCC_OscConfig+0x36e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d10c      	bne.n	8001eaa <HAL_RCC_OscConfig+0x356>
 8001e90:	4b61      	ldr	r3, [pc, #388]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4a60      	ldr	r2, [pc, #384]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6213      	str	r3, [r2, #32]
 8001e9c:	4b5e      	ldr	r3, [pc, #376]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a5d      	ldr	r2, [pc, #372]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	e00b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x36e>
 8001eaa:	4b5b      	ldr	r3, [pc, #364]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4a5a      	ldr	r2, [pc, #360]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6213      	str	r3, [r2, #32]
 8001eb6:	4b58      	ldr	r3, [pc, #352]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a57      	ldr	r2, [pc, #348]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d015      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7ff fb67 	bl	800159c <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7ff fb63 	bl	800159c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e0b1      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee8:	4b4b      	ldr	r3, [pc, #300]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ee      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x37e>
 8001ef4:	e014      	b.n	8001f20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fb51 	bl	800159c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7ff fb4d 	bl	800159c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e09b      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f14:	4b40      	ldr	r3, [pc, #256]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1ee      	bne.n	8001efe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d105      	bne.n	8001f32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f26:	4b3c      	ldr	r3, [pc, #240]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a3b      	ldr	r2, [pc, #236]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8087 	beq.w	800204a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f3c:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d061      	beq.n	800200c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d146      	bne.n	8001fde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f50:	4b33      	ldr	r3, [pc, #204]	; (8002020 <HAL_RCC_OscConfig+0x4cc>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7ff fb21 	bl	800159c <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7ff fb1d 	bl	800159c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e06d      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f70:	4b29      	ldr	r3, [pc, #164]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f84:	d108      	bne.n	8001f98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	4921      	ldr	r1, [pc, #132]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f98:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a19      	ldr	r1, [r3, #32]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	491b      	ldr	r1, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff faf1 	bl	800159c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7ff faed 	bl	800159c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e03d      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f0      	beq.n	8001fbe <HAL_RCC_OscConfig+0x46a>
 8001fdc:	e035      	b.n	800204a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_RCC_OscConfig+0x4cc>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fada 	bl	800159c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff fad6 	bl	800159c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e026      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_RCC_OscConfig+0x4c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x498>
 800200a:	e01e      	b.n	800204a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d107      	bne.n	8002024 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e019      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
 8002020:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_OscConfig+0x500>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	429a      	cmp	r2, r3
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000

08002058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0d0      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d910      	bls.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b67      	ldr	r3, [pc, #412]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4965      	ldr	r1, [pc, #404]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b63      	ldr	r3, [pc, #396]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b8      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b4:	4b59      	ldr	r3, [pc, #356]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a58      	ldr	r2, [pc, #352]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a52      	ldr	r2, [pc, #328]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d8:	4b50      	ldr	r3, [pc, #320]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	494d      	ldr	r1, [pc, #308]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d040      	beq.n	8002178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d115      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e07f      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e073      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	4b3d      	ldr	r3, [pc, #244]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e06b      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b39      	ldr	r3, [pc, #228]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4936      	ldr	r1, [pc, #216]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7ff fa28 	bl	800159c <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7ff fa24 	bl	800159c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e053      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b27      	ldr	r3, [pc, #156]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d210      	bcs.n	80021a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	4922      	ldr	r1, [pc, #136]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e032      	b.n	800220e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4916      	ldr	r1, [pc, #88]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d009      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	490e      	ldr	r1, [pc, #56]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021e6:	f000 f821 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	490a      	ldr	r1, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021f8:	5ccb      	ldrb	r3, [r1, r3]
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1cc>)
 8002200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1d0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff f986 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40022000 	.word	0x40022000
 800221c:	40021000 	.word	0x40021000
 8002220:	08002b50 	.word	0x08002b50
 8002224:	20000064 	.word	0x20000064
 8002228:	20000068 	.word	0x20000068

0800222c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b04      	cmp	r3, #4
 8002254:	d002      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x30>
 8002256:	2b08      	cmp	r3, #8
 8002258:	d003      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0x36>
 800225a:	e027      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800225e:	613b      	str	r3, [r7, #16]
      break;
 8002260:	e027      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	0c9b      	lsrs	r3, r3, #18
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800226c:	5cd3      	ldrb	r3, [r2, r3]
 800226e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d010      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800227a:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0c5b      	lsrs	r3, r3, #17
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	4a11      	ldr	r2, [pc, #68]	; (80022cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800228e:	fb03 f202 	mul.w	r2, r3, r2
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e004      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	613b      	str	r3, [r7, #16]
      break;
 80022aa:	e002      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ae:	613b      	str	r3, [r7, #16]
      break;
 80022b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b2:	693b      	ldr	r3, [r7, #16]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	007a1200 	.word	0x007a1200
 80022c8:	08002b60 	.word	0x08002b60
 80022cc:	08002b70 	.word	0x08002b70
 80022d0:	003d0900 	.word	0x003d0900

080022d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <RCC_Delay+0x34>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <RCC_Delay+0x38>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	0a5b      	lsrs	r3, r3, #9
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022f0:	bf00      	nop
  }
  while (Delay --);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1e5a      	subs	r2, r3, #1
 80022f6:	60fa      	str	r2, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f9      	bne.n	80022f0 <RCC_Delay+0x1c>
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	20000064 	.word	0x20000064
 800230c:	10624dd3 	.word	0x10624dd3

08002310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e041      	b.n	80023a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff f856 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3304      	adds	r3, #4
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f000 fa6e 	bl	8002830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d001      	beq.n	80023c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e035      	b.n	8002434 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a16      	ldr	r2, [pc, #88]	; (8002440 <HAL_TIM_Base_Start_IT+0x90>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d009      	beq.n	80023fe <HAL_TIM_Base_Start_IT+0x4e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f2:	d004      	beq.n	80023fe <HAL_TIM_Base_Start_IT+0x4e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a12      	ldr	r2, [pc, #72]	; (8002444 <HAL_TIM_Base_Start_IT+0x94>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d111      	bne.n	8002422 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b06      	cmp	r3, #6
 800240e:	d010      	beq.n	8002432 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002420:	e007      	b.n	8002432 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40012c00 	.word	0x40012c00
 8002444:	40000400 	.word	0x40000400

08002448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b02      	cmp	r3, #2
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b02      	cmp	r3, #2
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0202 	mvn.w	r2, #2
 8002474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f9b4 	bl	80027f8 <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f9a7 	bl	80027e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f9b6 	bl	800280a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d122      	bne.n	80024f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d11b      	bne.n	80024f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0204 	mvn.w	r2, #4
 80024c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f98a 	bl	80027f8 <HAL_TIM_IC_CaptureCallback>
 80024e4:	e005      	b.n	80024f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f97d 	bl	80027e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f98c 	bl	800280a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b08      	cmp	r3, #8
 8002504:	d122      	bne.n	800254c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b08      	cmp	r3, #8
 8002512:	d11b      	bne.n	800254c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0208 	mvn.w	r2, #8
 800251c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2204      	movs	r2, #4
 8002522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f960 	bl	80027f8 <HAL_TIM_IC_CaptureCallback>
 8002538:	e005      	b.n	8002546 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f953 	bl	80027e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f962 	bl	800280a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b10      	cmp	r3, #16
 8002558:	d122      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b10      	cmp	r3, #16
 8002566:	d11b      	bne.n	80025a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0210 	mvn.w	r2, #16
 8002570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2208      	movs	r2, #8
 8002576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f936 	bl	80027f8 <HAL_TIM_IC_CaptureCallback>
 800258c:	e005      	b.n	800259a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f929 	bl	80027e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f938 	bl	800280a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d10e      	bne.n	80025cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d107      	bne.n	80025cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0201 	mvn.w	r2, #1
 80025c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7fe fddc 	bl	8001184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d6:	2b80      	cmp	r3, #128	; 0x80
 80025d8:	d10e      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e4:	2b80      	cmp	r3, #128	; 0x80
 80025e6:	d107      	bne.n	80025f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fa6b 	bl	8002ace <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d10e      	bne.n	8002624 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b40      	cmp	r3, #64	; 0x40
 8002612:	d107      	bne.n	8002624 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800261c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8fc 	bl	800281c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b20      	cmp	r3, #32
 8002630:	d10e      	bne.n	8002650 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b20      	cmp	r3, #32
 800263e:	d107      	bne.n	8002650 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0220 	mvn.w	r2, #32
 8002648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fa36 	bl	8002abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_TIM_ConfigClockSource+0x1c>
 8002670:	2302      	movs	r3, #2
 8002672:	e0b4      	b.n	80027de <HAL_TIM_ConfigClockSource+0x186>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800269a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ac:	d03e      	beq.n	800272c <HAL_TIM_ConfigClockSource+0xd4>
 80026ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b2:	f200 8087 	bhi.w	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ba:	f000 8086 	beq.w	80027ca <HAL_TIM_ConfigClockSource+0x172>
 80026be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c2:	d87f      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026c4:	2b70      	cmp	r3, #112	; 0x70
 80026c6:	d01a      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xa6>
 80026c8:	2b70      	cmp	r3, #112	; 0x70
 80026ca:	d87b      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026cc:	2b60      	cmp	r3, #96	; 0x60
 80026ce:	d050      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0x11a>
 80026d0:	2b60      	cmp	r3, #96	; 0x60
 80026d2:	d877      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026d4:	2b50      	cmp	r3, #80	; 0x50
 80026d6:	d03c      	beq.n	8002752 <HAL_TIM_ConfigClockSource+0xfa>
 80026d8:	2b50      	cmp	r3, #80	; 0x50
 80026da:	d873      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d058      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0x13a>
 80026e0:	2b40      	cmp	r3, #64	; 0x40
 80026e2:	d86f      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026e4:	2b30      	cmp	r3, #48	; 0x30
 80026e6:	d064      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x15a>
 80026e8:	2b30      	cmp	r3, #48	; 0x30
 80026ea:	d86b      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d060      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x15a>
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d867      	bhi.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d05c      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x15a>
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d05a      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x15a>
 80026fc:	e062      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f000 f95e 	bl	80029ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	609a      	str	r2, [r3, #8]
      break;
 800272a:	e04f      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f000 f947 	bl	80029ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800274e:	609a      	str	r2, [r3, #8]
      break;
 8002750:	e03c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	461a      	mov	r2, r3
 8002760:	f000 f8be 	bl	80028e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2150      	movs	r1, #80	; 0x50
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f915 	bl	800299a <TIM_ITRx_SetConfig>
      break;
 8002770:	e02c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6859      	ldr	r1, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	461a      	mov	r2, r3
 8002780:	f000 f8dc 	bl	800293c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2160      	movs	r1, #96	; 0x60
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f905 	bl	800299a <TIM_ITRx_SetConfig>
      break;
 8002790:	e01c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 f89e 	bl	80028e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2140      	movs	r1, #64	; 0x40
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f8f5 	bl	800299a <TIM_ITRx_SetConfig>
      break;
 80027b0:	e00c      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4619      	mov	r1, r3
 80027bc:	4610      	mov	r0, r2
 80027be:	f000 f8ec 	bl	800299a <TIM_ITRx_SetConfig>
      break;
 80027c2:	e003      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      break;
 80027c8:	e000      	b.n	80027cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
	...

08002830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <TIM_Base_SetConfig+0xa8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <TIM_Base_SetConfig+0x28>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284e:	d003      	beq.n	8002858 <TIM_Base_SetConfig+0x28>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a22      	ldr	r2, [pc, #136]	; (80028dc <TIM_Base_SetConfig+0xac>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d108      	bne.n	800286a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800285e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <TIM_Base_SetConfig+0xa8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <TIM_Base_SetConfig+0x52>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d003      	beq.n	8002882 <TIM_Base_SetConfig+0x52>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a17      	ldr	r2, [pc, #92]	; (80028dc <TIM_Base_SetConfig+0xac>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d108      	bne.n	8002894 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <TIM_Base_SetConfig+0xa8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d103      	bne.n	80028c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	615a      	str	r2, [r3, #20]
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400

080028e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	f023 0201 	bic.w	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800290a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f023 030a 	bic.w	r3, r3, #10
 800291c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	621a      	str	r2, [r3, #32]
}
 8002932:	bf00      	nop
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f023 0210 	bic.w	r2, r3, #16
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	031b      	lsls	r3, r3, #12
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002978:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	621a      	str	r2, [r3, #32]
}
 8002990:	bf00      	nop
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f043 0307 	orr.w	r3, r3, #7
 80029bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	609a      	str	r2, [r3, #8]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b087      	sub	sp, #28
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	021a      	lsls	r2, r3, #8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	431a      	orrs	r2, r3
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	609a      	str	r2, [r3, #8]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e041      	b.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d009      	beq.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d004      	beq.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d10c      	bne.n	8002a96 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40000400 	.word	0x40000400

08002abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <__libc_init_array>:
 8002ae0:	b570      	push	{r4, r5, r6, lr}
 8002ae2:	2600      	movs	r6, #0
 8002ae4:	4d0c      	ldr	r5, [pc, #48]	; (8002b18 <__libc_init_array+0x38>)
 8002ae6:	4c0d      	ldr	r4, [pc, #52]	; (8002b1c <__libc_init_array+0x3c>)
 8002ae8:	1b64      	subs	r4, r4, r5
 8002aea:	10a4      	asrs	r4, r4, #2
 8002aec:	42a6      	cmp	r6, r4
 8002aee:	d109      	bne.n	8002b04 <__libc_init_array+0x24>
 8002af0:	f000 f822 	bl	8002b38 <_init>
 8002af4:	2600      	movs	r6, #0
 8002af6:	4d0a      	ldr	r5, [pc, #40]	; (8002b20 <__libc_init_array+0x40>)
 8002af8:	4c0a      	ldr	r4, [pc, #40]	; (8002b24 <__libc_init_array+0x44>)
 8002afa:	1b64      	subs	r4, r4, r5
 8002afc:	10a4      	asrs	r4, r4, #2
 8002afe:	42a6      	cmp	r6, r4
 8002b00:	d105      	bne.n	8002b0e <__libc_init_array+0x2e>
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
 8002b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b08:	4798      	blx	r3
 8002b0a:	3601      	adds	r6, #1
 8002b0c:	e7ee      	b.n	8002aec <__libc_init_array+0xc>
 8002b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b12:	4798      	blx	r3
 8002b14:	3601      	adds	r6, #1
 8002b16:	e7f2      	b.n	8002afe <__libc_init_array+0x1e>
 8002b18:	08002b74 	.word	0x08002b74
 8002b1c:	08002b74 	.word	0x08002b74
 8002b20:	08002b74 	.word	0x08002b74
 8002b24:	08002b78 	.word	0x08002b78

08002b28 <memset>:
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4402      	add	r2, r0
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d100      	bne.n	8002b32 <memset+0xa>
 8002b30:	4770      	bx	lr
 8002b32:	f803 1b01 	strb.w	r1, [r3], #1
 8002b36:	e7f9      	b.n	8002b2c <memset+0x4>

08002b38 <_init>:
 8002b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b3a:	bf00      	nop
 8002b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3e:	bc08      	pop	{r3}
 8002b40:	469e      	mov	lr, r3
 8002b42:	4770      	bx	lr

08002b44 <_fini>:
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b46:	bf00      	nop
 8002b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4a:	bc08      	pop	{r3}
 8002b4c:	469e      	mov	lr, r3
 8002b4e:	4770      	bx	lr
